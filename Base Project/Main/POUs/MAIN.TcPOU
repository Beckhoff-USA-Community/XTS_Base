<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="MAIN" Id="{c992ed33-41fe-02c4-17ef-23123b9a5b23}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR	

	// Machine
	MainCommands	: MachineCmd_typ;
	State			: MachineState_enum;
	XTS				: FB_XTS;
	Init			: BOOL;
	// ========= Example Application Variables =========

    nextStation 			: USINT := 4;
                    	
    lowVelocity    			: LREAL := 200;  	// mm/s
    mediumVelocity 			: LREAL := 800;  	// mm/s
    highVelocity   			: LREAL := 1200; 	// mm/s
	
	StationTimer 			: ARRAY[0..GVL.NUM_STATIONS] OF TON; // timer blocks, for station dwells
	InitialParameterSet		: MotionParameters_typ;
	RecoveryComplete		: BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Init THEN Initializing(); END_IF

CASE State OF 

	MS_OFF:
		IF MainCommands.Enable THEN
			XTS.Commands.Enable		:= TRUE;
			xts.Commands.Disable	:= FALSE;
			State					:= MS_RESTARTING;
		END_IF

	MS_RESTARTING:
		IF MainCommands.Disable THEN
			XTS.Commands.Enable		:= FALSE;
			XTS.Commands.Disable	:= TRUE;
			State					:= MS_STOPPING;
		ELSIF XTS.State = XTS_ENABLED THEN
			XTS.Track[1].CurrentMoverList.SetAllVelocity(MediumVelocity).MoveAllToStation(XTS.Station[0]);
			nextStation := 4;
			State		:= MS_RUNNING;
		END_IF

	MS_RUNNING:
		StationLogic();
		
		IF MainCommands.Disable THEN
			XTS.Commands.Disable	:= TRUE;
			XTS.Commands.Enable		:= FALSE;
			State					:= MS_STOPPING;
		END_IF

	MS_CYCLESTOP:

	MS_STOPPING:
		IF XTS.State = XTS_DISABLED THEN
			XTS.Commands.Disable	:= FALSE;
			State					:= MS_OFF;
		END_IF

	MS_ERROR:
	
END_CASE

XTS.CyclicLogic();
]]></ST>
    </Implementation>
    <Action Name="Initializing" Id="{77eee1d6-568e-0448-2c64-a85af70fbf71}">
      <Implementation>
        <ST><![CDATA[// XTS Object Init
XTS.Station[0].Position 		:= 5;
XTS.Station[1].Position 		:= 750;
XTS.Station[2].Position 		:= 1200;
XTS.Station[3].Position 		:= 1300;
XTS.Station[4].Position 		:= 1400;

XTS.PositionTrigger[0].Position := 1500;
XTS.PositionTrigger[1].Position := 2000;
XTS.PositionTrigger[2].Position := 3500;

XTS.Zone[0].StartPosition		:= 3750;
XTS.Zone[0].EndPosition   		:= 750;

XTS.Zone[1].StartPosition 		:= 750;
XTS.Zone[1].EndPosition   		:= 1750;

XTS.Zone[2].StartPosition 		:= 1750;
XTS.Zone[2].EndPosition   		:= 2750;

XTS.Zone[3].StartPosition		:= 2750;
XTS.Zone[3].EndPosition   		:= 3750;

XTS.InitialParameterSet.Velocity		:= 1000;		// mm/s
XTS.InitialParameterSet.Acceleration	:= 10_000;		// mm/s2
XTS.InitialParameterSet.Deceleration	:= 10_000;		// mm/s2
XTS.InitialParameterSet.Jerk			:= 100_000;		// mm/s3
XTS.InitialParameterSet.Gap				:= 85;			// mm
XTS.InitialParameterSet.Direction		:= mcDirectionPositive;	

LowVelocity		:= 300;
MediumVelocity	:= 800;
HighVelocity	:= 1200;

Init	:= TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Recovering" Id="{43063827-0598-00b7-2079-e6fbfd8a6aff}">
      <Implementation>
        <ST><![CDATA[// this state is called until all movers have completed their desired recovery tasks

// wait for all movers to reach the standstill state and one mover at station 0
IF (XTS.System.CompleteMoverList.IsAllMoversHalted AND XTS.Station[0].MoverInPosition) THEN
	RecoveryComplete := TRUE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="RecoverOneshot" Id="{7eb1f3e7-2df1-00d5-25c0-031445570e00}">
      <Implementation>
        <ST><![CDATA[// this action is called one time after the start command is issued
// it is intended to provide a single command to each mover to facilitate recovery
// other commands such as resetting counters and timers should also be carried out here

// send all movers to station 0
XTS.System.CompleteMoverList.SetAllVelocity(mediumVelocity).MoveAllToStation( XTS.Station[0] );
XTS.System.ResetStatistics();

// Reinit nextStation
nextStation := 4;]]></ST>
      </Implementation>
    </Action>
    <Action Name="StationLogic" Id="{ad15b1d3-f9a4-013e-29dd-5430b02980cb}">
      <Implementation>
        <ST><![CDATA[		(*Mover routing logic should be written here to define the system's operating behavior.
		Station implementations, Position Trigger logic, etc. In general, you can remove the example code
		here down to the short line break that looks like this: // ============= *)
	
        // Station 0 Logic
        IF XTS.Station[0].MoverInPosition THEN
            StationTimer[0](IN := TRUE, PT := T#1000MS);
            IF StationTimer[0].Q THEN
                XTS.Station[0].CurrentMover.MoveToStation(XTS.Station[1]);
            END_IF
        ELSE
            StationTimer[0](IN := FALSE);
        END_IF
		
        // Station 1 Logic		
        IF XTS.Station[1].MoverInPosition THEN
            StationTimer[1](IN := TRUE, PT := T#250MS);
            IF StationTimer[1].Q THEN
                XTS.Station[1].CurrentMover.MoveToStation(XTS.Station[nextStation]);
                nextStation := nextStation - 1;
                IF nextStation = 1 THEN
                    nextStation := 4;
                END_IF
            END_IF
        ELSE
            StationTimer[1](IN := FALSE);
        END_IF
		
		// Group of Stations 2, 3, and 4 Logic
        IF XTS.Station[2].MoverInPosition AND XTS.Station[3].MoverInPosition AND XTS.Station[4].MoverInPosition THEN
            StationTimer[2](IN := TRUE, PT := T#750MS);
            IF StationTimer[2].Q THEN
				StationTimer[2](IN := FALSE);

                XTS.Station[2].CurrentMover.MoveVelocity(500);
                XTS.Station[3].CurrentMover.MoveVelocity(500);
                XTS.Station[4].CurrentMover.MoveVelocity(500);
            END_IF
        END_IF
		
        // Position Trigger 0 Logic
        IF XTS.PositionTrigger[0].MoverPassedPosition THEN
            XTS.PositionTrigger[0].CurrentMover.SetVelocity(lowVelocity);
            XTS.PositionTrigger[0].MuteCurrent();
        END_IF
		
        // Position Trigger 1 Logic
        IF XTS.PositionTrigger[1].MoverPassedPosition THEN
			XTS.PositionTrigger[1].CurrentMover.SetAcceleration(5E2);
            XTS.PositionTrigger[1].CurrentMover.SetVelocity(highVelocity);
            XTS.PositionTrigger[1].MuteCurrent();
        END_IF

		// Position Trigger 2 Logic
        IF XTS.PositionTrigger[2].MoverPassedPosition THEN
			XTS.PositionTrigger[2].CurrentMover.SetAcceleration(1E4);
            XTS.PositionTrigger[2].CurrentMover.SetVelocity(lowVelocity);
            XTS.PositionTrigger[2].CurrentMover.MoveToStation(XTS.Station[0]);
            XTS.PositionTrigger[2].MuteCurrent();
        END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="249" Count="42" />
      <LineId Id="248" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Initializing">
      <LineId Id="38" Count="33" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Recovering">
      <LineId Id="2" Count="4" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.RecoverOneshot">
      <LineId Id="2" Count="8" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.StationLogic">
      <LineId Id="63" Count="58" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>