<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PositionTrigger" Id="{2be242dd-21c3-49cc-ab16-707ac1bbd2e6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}
FUNCTION_BLOCK PositionTrigger EXTENDS Objective

VAR
    internalPosition    	 : LREAL;
    internalTriggerDirection 	 : Tc2_MC2.MC_Direction;
    internalMoverPassedPosition : BOOL;
    internalCurrentMover     	 : POINTER TO Mover;
	internalTrackId				: DINT;
    moverLastPos              	: ARRAY[0..GVL.NUM_MOVERS - 1] OF LREAL; // Positions of tracked movers from last cycle
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{5543ded2-7a48-48d8-8a29-b553779a4150}" />
    <Folder Name="Properties" Id="{8d51ba54-c5eb-42a0-ba8e-ec7acb9ee6ae}" />
    <Property Name="CurrentMover" Id="{08e03357-929c-40a3-8446-c462dfedb470}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CurrentMover : REFERENCE TO Mover]]></Declaration>
      <Get Name="Get" Id="{d772a5d5-0e79-4d5f-ad7a-159060b39ae3}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[

CurrentMover						REF= internalCurrentMover^;
CurrentMover.SourceInstancePath		:= THIS^.InstancePath;

// If the Trigger has no CurrentMover, then return an imposter ErrorMover,
// whose method calls all trigger an error message
IF __ISVALIDREF(CurrentMover) = FALSE THEN
    ErrorMover.SourceInstancePath := THIS^.InstancePath;
    CurrentMover                  REF= ErrorMover;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cyclic" Id="{837bb22f-75d9-4f81-992f-274e662e1a69}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Cyclic : BOOL
VAR_INPUT
END_VAR
VAR
	
    i                       	: INT;	
	currentIsRegistered			: BOOL;
	moverTrackId				: INT;
	positionDifference			: LREAL;
	modTrackPosition			: LREAL;
	rolloverOccured				: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentIsRegistered		:= FALSE;

FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
    IF internalTrackedMovers[i] <> 0 THEN
		moverTrackId := internalTrackedMovers[i]^.CurrentTrack^.Id;
		IF (moverTrackId = internalTrackId) THEN
	
		
			// Determine if a position rollover occured in the last cycle
			modTrackPosition := MODABS( internalTrackedMovers[i]^.TrackInfo.TrackPosition, GVL.TRACK_LENGTH);
			positionDifference := moverLastPos[i] - modTrackPosition;
			rolloverOccured := (positionDifference) > (GVL.TRACK_LENGTH - 0.1);
			// and if so, modify the stored last position values to be nonmodulo to compensate
			IF rolloverOccured AND positionDifference > 0 THEN
				moverLastPos[i]		:= moverLastPos[i] - GVL.TRACK_LENGTH;
			ELSIF rolloverOccured AND positionDifference < 0 THEN
				moverLastPos[i]		:= moverLastPos[i] + GVL.TRACK_LENGTH;
			END_IF
		
			// Look for movers passing over the threshold this cycle and assign it to the
			// InternalCurrentMover output, which should latch until it is cleared
			IF TriggerDirection = MC_Positive_Direction AND moverLastPos[i] < internalPosition AND
				modTrackPosition >= internalPosition THEN
				
				// Position trigger event detected in the positive direction
				internalMoverPassedPosition		:= TRUE;
				internalCurrentMover			:= internalTrackedMovers[i];
				
			ELSIF TriggerDirection = MC_Negative_Direction AND moverLastPos[i] > internalPosition AND
				modTrackPosition <= internalPosition THEN
				
				// Position trigger event detecte in the negative direction
				internalMoverPassedPosition		:= TRUE;
				internalCurrentMover			:= internalTrackedMovers[i];
				
			END_IF
			
			
			
			// Ensure that the CurrentMover is still registered with the PositionTrigger
			IF internalCurrentMover <> 0 AND internalTrackedMovers[i] = internalCurrentMover THEN
				currentIsRegistered		:= TRUE;
			END_IF
	
			moverLastPos[i] 		:= modTrackPosition;
		END_IF	
	ELSE
		IF TriggerDirection = MC_Negative_Direction THEN
			moverLastPos[i] := -1E300; // very negative value, to prevent false-positive triggers on first cycle
		ELSIF TriggerDirection = MC_Positive_Direction THEN
			moverLastPos[i] := 1E300; // very positive value, to prevent false-positive triggers on first cycle
		END_IF
	END_IF

END_FOR


// If the CurrentMover isn't found in the registration list, then it has been removed, and should no longer be Current
IF currentIsRegistered = FALSE THEN
	internalMoverPassedPosition		:= FALSE;
	internalCurrentMover			:= 0;
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverPassedPosition" Id="{6ef1f07f-a5fa-461a-8898-d87506fab1a7}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY MoverPassedPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{a91db2b1-564e-4fdf-92fa-febfe2148c87}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverPassedPosition := internalMoverPassedPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MuteCurrent" Id="{f0f7dfa6-6c7f-0f13-1029-58bc07baccb3}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD MuteCurrent : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

internalMoverPassedPosition		:= FALSE;
internalCurrentMover			:= 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Position" Id="{ec302377-0190-40b3-b726-4713ec7a403b}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Position : LREAL]]></Declaration>
      <Get Name="Get" Id="{ff32a52e-c366-4283-94bb-898d1069bf0a}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Position := internalPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b77ff2fd-1ee8-41cd-8d5f-9b4c152df435}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[// todo maybe do a limits check here?
internalPosition := Position;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TrackId" Id="{127d74ba-df8b-0a03-0926-c5e68e5e3675}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TrackId : DINT]]></Declaration>
      <Get Name="Get" Id="{ffb39293-6b9f-0a6a-06be-511a7a51c7e5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackId := internalTrackId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8ac2de8f-e5ea-0661-0c2c-20e585f6741b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[internalTrackId := TrackId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TriggerDirection" Id="{da3896fd-b18b-47dc-bafd-92a621ffa675}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY TriggerDirection : Tc2_MC2.MC_Direction]]></Declaration>
      <Get Name="Get" Id="{423fc284-e969-4051-9911-5a30b9185b1a}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[TriggerDirection := internalTriggerDirection;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f583cf2c-e716-4e32-994c-ff6c210917d6}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[internalTriggerDirection := TriggerDirection;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="PositionTrigger">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.CurrentMover.Get">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.Cyclic">
      <LineId Id="86" Count="3" />
      <LineId Id="160" Count="0" />
      <LineId Id="90" Count="3" />
      <LineId Id="185" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="94" Count="5" />
      <LineId Id="104" Count="33" />
      <LineId Id="139" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.MoverPassedPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.MuteCurrent">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.Position.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.Position.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.TrackId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.TrackId.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.TriggerDirection.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.TriggerDirection.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>