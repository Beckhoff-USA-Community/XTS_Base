<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Mover" Id="{461a92b9-026e-4cbb-aa50-b18297f25ecc}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK Mover IMPLEMENTS iMover;

VAR_INPUT
	
	Mediator				: REFERENCE TO Mediator;
	MotionParameters		: MotionParameters_typ;		// Motion parameters used by internal motion function blocks
	SourceInstancePath		: STRING	:= 'Direct access';					// Used internally to temporarily store the source of a Mover method call for logging purposes. Don't read or write

END_VAR
VAR_OUTPUT
	
	Ready			: BOOL;			// Mover is enabled and ready to accept motion commands
	Busy			: BOOL;			// Mover is processing a command or changing state
	
	Error			: BOOL;			// error is currently active
	ErrorID			: UDINT;		// errorID of the active error
	ErrorOrigin		: STRING;		// error source, in case of errored internal function block
	
	InGroup			: BOOL;			// Mover is currently grouped for CA
	IdentInGroup	: UDINT;		// IDX within group, for knowing which movers are adjacent
	
	AxisReference	: AXIS_REF;		// Motion link variable. Left as output so the link can be made directly, and accessed by external code
	
	TrackInfo		: TrackInfo;	// Track information as read from MC_ReadTrackPositions

END_VAR
VAR

	{attribute 'instance-path'}
	{attribute 'noinit'}
	{attribute 'hide'}
	InstancePath		: STRING;	// instance naming, for diagnostics purposes
	
	internalEnable		: BOOL;		// moves the axis from Disabled to Standstill, adds Axis to CA group, and triggers M1 Detection if configured
	internalDisable		: BOOL;		// moves the axis from Standstill to Disabled, removes Axis from CA Group
	
	internalCurrentMoveType			: MoverCommandType_enum;	// Most recent move command type
	internalReissue					: BOOL;						// reissue last command flag alows summing of all reissue commands per-scan
	
	internalCurrentDestPosition		: LREAL;	// Track position of the current motion destination;
	internalCurrentDestObjective	: STRING;	// Instance path of the current destination objective
	internalCurrentDestStation		: REFERENCE TO Station;		// Reference to a destination station, if that is the current movetype

	internalState					: MoverState_enum;		// Internal state variable
	internalTrackState				: TrackState;			// Internal state variable for track
	internalTrackStateDelay 		: TON;					// Internal timer for activate track delay
	
	internalMasterMover				: REFERENCE TO Mover;	// Internal reference to a target master mover
	internalMasterAxis				: REFERENCE TO AXIS_REF;	// Internal reference to a target master external axis
	internalGap						: LREAL;	// Gap distance to master mover during sync
	
	// Configurable Payload description	
	internalPayload			: USINT;	// E.g. 0: No Product, 1: Product Loaded, 2: Product Reject. Can be modified for application
	
	// Track management
	internalTrack				: POINTER TO Track;	// Internal current track
	internalTrackIsReady		: BOOL := TRUE;			// track is ready for commands (off when .ActivateTrack is working)
	internalActivatingTrack 	: POINTER TO Track;	// while NOT .internalTrackIsReady the in-transition-to track is held here
	internalActivateTrackFlag	: BOOL;				// activate track requested
	
	// Internal function blocks	
	fbPower					: MC_Power;
	fbReset					: MC_Reset;
	fbStop					: MC_Stop;
	
	fbHaltCA				: MC_HaltCA;

	fbMoveAbsCA				: ARRAY[0..1] OF MC_MoveAbsoluteCA;
	fbAddToGroup			: MC_AddAxisToGroup;
	fbRemoveFromGroup		: MC_RemoveAxisFromGroup;
	
	fbGearInPosAxisCA		: ARRAY[0..1] OF MC_GearInPosCA;
	fbGearInPosMoverCA		: ARRAY[0..1] OF MC_GearInPosCA;
	
	fbMoveRelCA				: ARRAY[0..1] OF MC_MoveRelativeCA;
	
	fbActivateTrack			: MC_ActivateTrack;
	fbReadTrackPositions	: MC_ReadTrackPositions;
	
	fbReadM1DetectMode		: ADSREAD;
	fbReadM1DetectValid		: ADSREAD;
	fbReadM1DetectActive	: ADSREAD;
	fbWriteM1Detect			: ADSWRITE;
	fbDelayM1Timer			: TON;
	
	// vars to store system time of most recent method calls, for filtering event logger
	
	lastCallCyclic		: LREAL;
	lastCallDisable		: LREAL;
	lastCallEnable		: LREAL;
	lastCallGroupStop	: LREAL;
	lastCallHalt		: LREAL;
	lastCallMovePos		: LREAL;
	lastCallMoveSta		: LREAL;
	lastCallMoveVel		: LREAL;
	lastCallReissue		: LREAL;
	lastCallSetAcc		: LREAL;
	lastCallSetDec		: LREAL;
	lastCallSetDir		: LREAL;
	lastCallSetJerk		: LREAL;
	lastCallSetVel		: LREAL;
	lastCallSync		: LREAL;
	lastCallValidateTrack : LREAL;
	lastCallSetGap		: LREAL;
	lastCallActivateTrack : LREAL;
	
END_VAR
VAR_IN_OUT
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{d146b766-1176-40b7-a641-ffa579406c77}" />
    <Folder Name="Properties" Id="{9b9301bf-13c1-4ce0-91ab-e61950dfd74a}" />
    <Method Name="ActivateTrack" Id="{2cd7eff7-09ea-0845-346b-196f53ea2e60}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ActivateTrack : BOOL
VAR_INPUT
	Track	: REFERENCE TO Track;
END_VAR
VAR
	newCallTime			: LREAL;
END_VAR
VAR_INST
	MsgCreate			: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// active the track for this mover
// THIS ROUTINE IS NOT CHAINABLE wait for .IsTrackReady before issuing additional motion commands

// this routine only stores data and sets flags
// actual work of activating the track is done in .CyclicTrack()
// to enable this to be called on every scan, a check is made here for not busy as MC_ActivateTrack does not handle multiple calls efficently
// .CyclicTrack() monitors for a falling edge on internalActivateTrack before allowing another command
// this functionality mimics motion library commands such as MC_MoveAbsolute

// do not re-activate track if it is already selected
IF (internalTrack = 0 OR (internalTrack <> 0 AND_THEN Track.Id <> internalTrack^.Id)) THEN
	internalActivateTrackFlag := TRUE;
	IF (internalTrackState = TrackState.WAIT_FOR_COMMAND) THEN
		internalActivatingTrack := ADR(Track);
		internalTrackIsReady := FALSE;
		
		newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
		
		IF ( newCallTime - lastCallActivateTrack ) > 1 THEN
			MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverActivateTrack,0 );
			MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddInt(internalActivatingTrack^.Id).AddString(THIS^.SourceInstancePath).AddString(Track.InstancePath);
			MsgCreate.Send(0);
		END_IF
		
		lastCallActivateTrack		:= newCallTime;
	END_IF;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentDestinationPosition" Id="{6d470b15-bd31-4ad6-8559-906c2c8d720c}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CurrentDestinationPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{bc93c9f7-92a5-426e-9c7f-5953d1b7c034}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
CurrentDestinationPosition		:= internalCurrentDestPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentDestinationTrack" Id="{f44717ff-7baf-0aa6-3174-9f719de28f4d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentDestinationTrack : DINT]]></Declaration>
      <Get Name="Get" Id="{8c28783f-5955-0092-0fca-8afe86f48bde}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentDestinationTrack := internalCurrentDestStation.TrackId;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentMoveType" Id="{97c82f4e-fad3-4ecf-8f48-6f47f3a34a61}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CurrentMoveType : MoverCommandType_enum]]></Declaration>
      <Get Name="Get" Id="{008a2288-6099-47d9-88ab-640a99950162}">
        <Declaration><![CDATA[VAR
	MoverCurrentMoveType: MoverCommandType_enum;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
CurrentMoveType		:= internalCurrentMoveType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentObjective" Id="{b06cf2ff-b1dd-4afb-af24-76820a9809f8}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CurrentObjective : String]]></Declaration>
      <Get Name="Get" Id="{39f22891-e1d0-4fbf-9032-2bbc45b18310}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
CurrentObjective		:= internalCurrentDestObjective;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentTrack" Id="{57746913-d241-0290-0366-208479410de1}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentTrack : POINTER TO Track]]></Declaration>
      <Get Name="Get" Id="{845db4a8-12f5-01df-23b2-2ce5c8663c6a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentTrack := internalTrack;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cyclic" Id="{39769063-232f-402c-8c9b-ad47db196752}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Cyclic : iMover
VAR_IN_OUT
	GroupReference		: AXES_GROUP_REF;
END_VAR
VAR

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[




// cleans motion parameters, removing possible negatives. Upper bounds are capped by the axis parameters
MotionParameters.Acceleration	:= LIMIT( 0, MotionParameters.Acceleration, 1E300 );
MotionParameters.Deceleration	:= LIMIT( 0, MotionParameters.Deceleration, 1E300 );
MotionParameters.Jerk			:= LIMIT( 0, MotionParameters.Jerk, 1E300 );
MotionParameters.Velocity		:= LIMIT( 0, MotionParameters.Velocity, 1E300 );

CASE internalState OF
	MV_IDLE:	// ------------------------------------------------------- idle state
	
		Ready	:= FALSE;
		Busy	:= FALSE;

		fbMoveAbsCA[0].Execute	:= FALSE;
		fbMoveAbsCA[1].Execute	:= FALSE;
		fbMoveRelCA[0].Execute	:= FALSE;
		fbMoveRelCA[1].Execute	:= FALSE;
		
		internalDisable			:= FALSE;
		IF internalEnable THEN
			internalEnable		:= FALSE;
			internalState		:= MV_RESET;
		END_IF
		
	MV_RESET: // ------------------------------------------------------- axis is resetting
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbReset.Execute			:= TRUE;
		
		IF fbReset.Done THEN
			fbReset.Execute		:= FALSE;
			Mediator.DetectMover1();
			internalState		:= MV_M1_DELAY;
		ELSIF fbReset.Error THEN
			ErrorID				:= fbReset.ErrorID;
			ErrorOrigin			:= CONCAT( InstancePath, '.fbReset' );
			internalState		:= MV_ERROR;		
		END_IF
		
	MV_M1_DELAY:	// ------------------------------------------------------ delay to allow M1 Detect Completion
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbDelayM1Timer( IN := Mediator.Mover1DetectionComplete OR Mediator.XPU.GetMoverIdDetectionMode() = 0, PT := T#500MS );
		
		IF fbDelayM1Timer.Q THEN
			fbDelayM1Timer( IN := FALSE );
			internalState	:= MV_ENABLING;
		END_IF
			
	MV_ENABLING: // ------------------------------------------------------- axis is enabling
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbPower.Enable					:= TRUE;
		fbPower.Enable_Positive			:= TRUE;
		fbPower.Enable_Negative			:= TRUE;
		fbPower.BufferMode				:= MC_Aborting;
		fbPower.Override				:= 100;
		
		IF fbPower.Status THEN
			internalState				:= MV_ADDTOGROUP;
		ELSIF fbPower.Error THEN
			ErrorID						:= fbPower.ErrorID;
			ErrorOrigin					:= CONCAT( InstancePath, '.fbPower' );
			internalState				:= MV_ERROR;
		END_IF
		
	MV_ADDTOGROUP: // ------------------------------------------------------- axis is adding to a group
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbAddToGroup.Execute			:= TRUE;
		fbAddToGroup.IdentInGroup		:= UDINT_TO_IDENTINGROUP( AxisReference.NcToPlc.AxisId - 1 );
		
		IF fbAddToGroup.Done THEN
			InGroup						:= TRUE;
			IdentInGroup				:= AxisReference.NcToPlc.AxisId - 1;
			fbAddToGroup.Execute		:= FALSE;
			internalState				:= MV_ENABLEGROUP;
		ELSIF fbAddToGroup.Error THEN
			ErrorID						:= fbAddToGroup.ErrorId;
			ErrorOrigin					:= CONCAT( InstancePath, '.fbAddToGroup' );
			internalState				:= MV_ERROR;
		END_IF
		
	MV_ENABLEGROUP:	// ----------------------------------------------- have mediator enable group
		IF NOT Mediator.GroupEnabled THEN
			Mediator.EnableGroup();
		ELSE
			internalState := MV_RUN;
		END_IF
	
		
	MV_RUN: // ------------------------------------------------------- mover enabled, ready
	
		Ready	:= TRUE;
		IF NOT fbMoveAbsCA[0].busy AND NOT fbMoveAbsCA[1].Busy AND NOT fbMoveRelCA[0].Busy AND NOT fbMoveRelCA[1].Busy THEN 
			Busy	:= FALSE;
		ELSE
			Busy 	:= TRUE;
		END_IF
		Error	:= FALSE;
		ErrorID	:= 0;
		
		internalEnable			:= FALSE;		
		IF internalDisable THEN
			internalDisable		:= FALSE;
			internalState		:= MV_BEGIN_HALTING;
			
		// Reset all commands issued by method calls
		ELSIF fbMoveAbsCA[0].Busy OR fbMoveAbsCA[0].CommandAborted THEN // OR fbMoveAbs.CommandAborted THEN
			fbMoveAbsCA[0].Execute		:= FALSE;
		ELSIF fbMoveAbsCA[1].Busy OR fbMoveAbsCA[1].CommandAborted THEN
			fbMoveAbsCA[1].Execute		:= FALSE;			
		ELSIF fbAddToGroup.Done THEN
			fbAddToGroup.Execute		:= FALSE;
		ELSIF fbMoveRelCA[0].Busy OR fbMoveRelCA[0].CommandAborted THEN
			fbMoveRelCA[0].Execute		:= FALSE;
		ELSIF fbMoveRelCA[1].Busy OR fbMoveRelCA[1].CommandAborted THEN
			fbMoveRelCA[1].Execute		:= FALSE;
		ELSIF fbGearInPosMoverCA[0].Busy OR fbGearInPosMoverCA[0].CommandAborted THEN
			fbGearInPosMoverCA[0].Execute	:= FALSE;
		ELSIF fbGearInPosMoverCA[1].Busy OR fbGearInPosMoverCA[1].CommandAborted THEN
			fbGearInPosMoverCA[1].Execute	:= FALSE;
		ELSIF fbGearInPosAxisCA[0].Busy OR fbGearInPosAxisCA[0].CommandAborted THEN
			fbGearInPosAxisCA[0].Execute	:= FALSE;
		ELSIF fbGearInPosAxisCA[1].Busy OR fbGearInPosAxisCA[1].CommandAborted THEN
			fbGearInPosAxisCA[1].Execute	:= FALSE;
		ELSIF fbHaltCA.Busy OR fbHaltCA.CommandAborted OR fbHaltCA.Done THEN
			fbHaltCA.Execute			:= FALSE;
		END_IF;
		
		THIS^.CyclicTrack();
		
		IF (internalReissue) THEN
			THIS^.SourceInstancePath	:= 'ReissueCommand';

			CASE internalCurrentMoveType OF
				MOVETYPE_NONE:
					// No current command to reissue	
				MOVETYPE_POSITION:
					THIS^.MoveToPosition( internalCurrentDestPosition );
				MOVETYPE_STATION:
					THIS^.MoveToStation( internalCurrentDestStation );
				MOVETYPE_VELOCITY:
					THIS^.MoveVelocity( MotionParameters.Velocity );
				MOVETYPE_SYNC_MOVER:
					THIS^.SyncToMover( internalMasterMover, internalGap );
				MOVETYPE_SYNC_AXIS:
					// This command should perhaps not be compatible with Reissue command
			END_CASE
			internalReissue := FALSE;
		END_IF

		// And catch all internal function block errors
		IF fbMoveAbsCA[0].Error THEN
			ErrorID					:= fbMoveAbsCA[0].ErrorID;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbMoveAbs[0]' );
			internalState			:= MV_ERROR;
		ELSIF fbMoveAbsCA[1].Error THEN
			ErrorID					:= fbMoveAbsCA[1].ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbMoveAbs[1]' );
			internalState			:= MV_ERROR;
		ELSIF fbAddToGroup.Error THEN
			ErrorID					:= fbAddToGroup.ErrorID;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbAddToGroup' );
			internalState			:= MV_ERROR;
		ELSIF fbMoveRelCA[0].Error THEN
			ErrorID					:= fbMoveRelCA[0].ErrorID;
			ErrorOrigin 			:= CONCAT ( InstancePath, '.fbMoveRelCA[0]');
			internalState			:= MV_ERROR;
		ELSIF fbMoveRelCA[1].Error THEN
			ErrorID					:= fbMoveRelCA[1].ErrorID;
			ErrorOrigin 			:= CONCAT ( InstancePath, '.fbMoveRelCA[1]');
			internalState			:= MV_ERROR;
		ELSIF fbGearInPosMoverCA[0].Error THEN
			ErrorID					:= fbGearInPosMoverCA[0].ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbGearInPosMoverCA[0]');
			internalState			:= MV_ERROR;
		ELSIF fbGearInPosMoverCA[1].Error THEN
			ErrorID					:= fbGearInPosMoverCA[1].ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbGearInPosMoverCA[1]');
			internalState			:= MV_ERROR;
		ELSIF fbGearInPosAxisCA[0].Error THEN
			ErrorID					:= fbGearInPosAxisCA[0].ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbGearInPosAxisCA[0]');
			internalState			:= MV_ERROR;
		ELSIF fbGearInPosAxisCA[1].Error THEN
			ErrorID					:= fbGearInPosAxisCA[1].ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbGearInPosAxisCA[1]');
			internalState			:= MV_ERROR;			
		ELSIF fbActivateTrack.Error THEN
			ErrorID					:= fbActivateTrack.ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbActivateTrack');
			internalState			:= MV_ERROR;
		END_IF
		
	MV_BEGIN_HALTING:	// --------------------------------------------------- begin stopping process
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		// Kill any active motion commands
		fbMoveRelCA[0].Execute		:= FALSE;
		fbMoveRelCA[1].Execute		:= FALSE;
		fbMoveAbsCA[0].Execute		:= FALSE;
		fbMoveAbsCA[1].Execute		:= FALSE;
		
		IF Mediator.Error = FALSE THEN
			fbHaltCA.Execute		:= TRUE;
			//fbHaltCA.Deceleration	:= MotionParameters.Deceleration;
			//fbHaltCA.Jerk			:= MotionParameters.Jerk;
		ELSE
			internalState			:= MV_REMOVEFROMGROUP;
		END_IF;
		
		IF fbHaltCA.Active OR fbHaltCA.Done THEN
			internalState			:= MV_HALTING;
		ELSIF fbHaltCA.Error THEN
			ErrorID					:= fbHaltCA.ErrorID;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbHalt' );
			internalState			:= MV_ERROR;				
		END_IF	
		
	MV_HALTING:	// ------------------------------------------------------- mover disabling
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;

		// Wait for the stopping action to complete
		IF fbHaltCA.Done THEN
			fbHaltCA.Execute		:= FALSE;
			internalState			:= MV_REMOVEFROMGROUP;
		ELSIF fbHaltCA.Error THEN
			ErrorID					:= fbStop.ErrorID;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbHalt' );
			internalState			:= MV_ERROR;
		END_IF	
		
	MV_REMOVEFROMGROUP:	// ---------------------------------------------------- remove mover from CA group
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbRemoveFromGroup.Execute			:= TRUE;
		fbRemoveFromGroup.IdentInGroup		:= UDINT_TO_IDENTINGROUP( IdentInGroup );
		
		IF fbRemoveFromGroup.Done THEN
			fbRemoveFromGroup.Execute		:= FALSE;
			internalState					:= MV_DISABLING;
		END_IF
		


	MV_DISABLING:	// ----------------------------------------------------- start the disabling process

		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbPower.Enable				:= FALSE;
		fbPower.Enable_Positive		:= FALSE;
		fbPower.Enable_Negative		:= FALSE;
		fbPower.BufferMode			:= MC_Aborting;
		fbPower.Override			:= 100;
			
		IF fbPower.Status = FALSE THEN
			internalState			:= MV_IDLE;
		ELSIF fbPower.Error THEN
			ErrorID					:= fbPower.ErrorID;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbPower' );
			internalState			:= MV_ERROR;
		END_IF		
	
	MV_ERROR: // ------------------------------------------------------- mover in error state
	
		Ready	:= FALSE;
		Busy	:= FALSE;
		Error	:= TRUE;
		
		internalEnable			:= FALSE;		
		IF internalDisable THEN
			internalDisable		:= FALSE;
			internalState		:= MV_REMOVEFROMGROUP;
			ErrorOrigin			:= '';
		END_IF
		
END_CASE

fbPower( Axis := AxisReference );
fbReset( Axis := AxisReference );
fbStop( Axis := AxisReference );

fbHaltCA( Axis := AxisReference );
//fbDisable( Axis := AxisRef );
//fbExternEnable( Axis := AxisRef );

fbAddToGroup( AxesGroup := GroupReference, Axis := AxisReference );
fbRemoveFromGroup( AxesGroup := GroupReference );

fbMoveAbsCA[0]( Axis := AxisReference );
fbMoveAbsCA[1]( Axis := AxisReference );
fbMoveRelCA[0] ( Axis := AxisReference );
fbMoveRelCA[1] ( Axis := AxisReference );

fbGearInPosMoverCA[0]( Master := internalMasterMover.AxisReference, Slave := THIS^.AxisReference );
fbGearInPosMoverCA[1]( Master := internalMasterMover.AxisReference, Slave := THIS^.AxisReference );

fbGearInPosAxisCA[0]( Master := internalMasterAxis, Slave := THIS^.AxisReference );
fbGearInPosAxisCA[1]( Master := internalMasterAxis, Slave := THIS^.AxisReference );

fbReadM1DetectMode();
fbReadM1DetectValid();
fbReadM1DetectActive();
fbWriteM1Detect();

// track management
fbActivateTrack(Axis := AxisReference);
fbReadTrackPositions(Axis := AxisReference);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicTrack" Id="{f91ef8d2-f744-0809-3990-5a057546bb09}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD CyclicTrack : BOOL
VAR
END_VAR
VAR_INST
	MsgCreate			: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// called by .Cyclic() to handle the MC_ActivateTrack call's required state machine
// this is only called while the mover is in the RUN state within .Cyclic() by design
// calling the track management functions on disabled or errored movers that are not
// assigned to a group just causes the track management functions to throw more errors

// .internalTrack and thus the property .CurrentTrack are not updated until the track transition is complete
// this is deliberate. The timing of a track change reuqires at least 2 PLC scans. If .internalTrack were
// to be set to an invalid track number during these transitions checking for mover presence at
// stations and zones would cause movers to "disappear" during the transition which may cause
// upstream movers to be released erroniously because the station/zone momentarily appears clear

// in user code .IsTrackReady and .CurrentTrack should be queried together before issuing commands to a mover

CASE internalTrackState OF
	// wait for command
	TrackState.WAIT_FOR_COMMAND:
		IF (internalActivateTrackFlag AND internalActivatingTrack^.isInitialized) THEN
			// unregister mover from current track (logical tracking)
			IF (internalTrack <> 0) THEN
				internalTrack^.UnregisterMover(THIS^);
			END_IF;

			// set flags
			internalTrackIsReady := FALSE;

			// advance state
			internalTrackState := TrackState.SETUP_FUNCTION;
		END_IF
		
	// setup and call the function
	TrackState.SETUP_FUNCTION:
		fbActivateTrack.TrackId := internalActivatingTrack^.OTCID;
		fbActivateTrack.Execute := TRUE;
		IF (fbActivateTrack.Busy) THEN
			fbActivateTrack.Execute := FALSE;
			internalTrackState := TrackState.MONITOR_RESPONSE;
		END_IF
	
	// monitor response	
	TrackState.MONITOR_RESPONSE:
		IF (fbActivateTrack.Error) THEN
			internalTrackState := TrackState.ERROR;
		ELSIF (fbActivateTrack.Done) THEN
			internalTrackState := TrackState.REQUIRED_DELAY;
		END_IF;
	
	// required delay
	// the FB has returned .Done but the change has not yet propigated to the NC
	TrackState.REQUIRED_DELAY:
		internalTrackStateDelay.IN := TRUE;
		IF (internalTrackStateDelay.Q) THEN
			internalTrackStateDelay.IN := FALSE;
			internalTrackState := TrackState.CLEAN_UP;
		END_IF;
	
	// clean up flags
	TrackState.CLEAN_UP:
		internalTrack := internalActivatingTrack;
		internalTrackIsReady := TRUE;
		MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverActivateTrackComplete, 0);
		MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddInt(THIS^.CurrentTrack^.Id);
		MsgCreate.Send(0);
		// register mover
		internalTrack^.RegisterMover(THIS^);
		internalTrackState := TrackState.WAIT_END;
		
	TrackState.ERROR:
		// reset execute
		fbActivateTrack.Execute := FALSE;
		// GVL.ERROR_TRACK is intentionally left in place
		// internalTrackIsReady is left at false
		// error is recorded in Cyclic()
		internalTrackState := TrackState.WAIT_END;
		
	TrackState.WAIT_END: 
		// falling edge detection for internalActivateTrackFlag
		IF (NOT internalActivateTrackFlag) THEN
			internalTrackState := TrackState.WAIT_FOR_COMMAND;	
		END_IF
		internalActivateTrackFlag := FALSE;

END_CASE

// read back track information
IF (internalTrackIsReady) THEN
	// track info should be stable, call the block
	fbReadTrackPositions.Enable := TRUE;
	// copy data when ready
	IF (fbReadTrackPositions.Valid) THEN
		TrackInfo.TrackPosition := fbReadTrackPositions.TrackPosition;
		TrackInfo.PartPosition := fbReadTrackPositions.PartPosition;
		TrackInfo.TrackId := fbReadTrackPositions.TrackId;
		TrackInfo.PartId := fbReadTrackPositions.PartId;
	END_IF
ELSE
	// don't call function block to allow it to reset
	fbReadTrackPositions.Enable := FALSE;
END_IF


// a delay is required after MC_ActivateTrack returns .Done
internalTrackStateDelay(PT := T#10MS);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{2aa14795-54cd-46b8-a131-b1a8801c005f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Disable : iMover
VAR_INPUT
END_VAR
VAR
END_VAR
VAR_INST
	MsgCreate	: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF internalState = MV_RUN OR internalState = MV_ERROR THEN

	// Sets an internal flag to advance the state machine
	internalDisable		:= TRUE;
	
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverDisable,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath);
	MsgCreate.Send(0);	
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

Disable		:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{77bc5ebc-ace3-48eb-8e85-e45bc80ac98b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Enable : iMover
VAR_INPUT
END_VAR
VAR
END_VAR
VAR_INST
	MsgCreate	: FB_TcMessage;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF internalState = MV_IDLE THEN

	// Sets an internal flag to advance the state machine
	internalEnable		:= TRUE;
	
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverEnable,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath);
	MsgCreate.Send(0);

END_IF;

THIS^.SourceInstancePath	:= 'Direct access';

Enable := THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GroupStop" Id="{19a65925-9b39-4de9-ab16-7733d66c5fd4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD GroupStop : iMover
VAR_INPUT
END_VAR
VAR
	newCallTime	: LREAL;
END_VAR
VAR_INST
	MsgCreate	: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF NOT( Ready ) THEN	// if the mover is not ready & able to accept a GroupHalt Command

	internalState	:= MV_ERROR;
	ErrorID			:= 19201;

ELSE	// otherwise execute the command
	
	// grab a timestamp of the command
	newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	
//	fbGroupStop.Execute			:= TRUE;
//	fbGroupStop.Deceleration	:= MotionParameters.Deceleration;
//	fbGroupStop.Jerk			:= MotionParameters.Jerk;
	
	memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
	internalCurrentMoveType		:= MoverCommandType_enum.MOVETYPE_NONE;
	
END_IF

IF ( newCallTime - lastCallGroupStop ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverGroupStop,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallGroupStop	:= newCallTime;

GroupStop		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{1f55ad78-11ad-492d-9f7a-e48ae6feda84}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Halt : iMover
VAR_INPUT
END_VAR
VAR
	newCallTime: LREAL;
END_VAR
VAR_INST
	MsgCreate: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT( Ready ) THEN
	
	internalState	:= MV_ERROR;
	ErrorID			:= 19201;
	
ELSIF fbHaltCA.Busy THEN	

	newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	
	// oddly, MC_HaltCA does not include an option for BufferMode
	// so do nothing
	
ELSE
	
	newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	
	fbHaltCA.Execute		:= TRUE;
	fbHaltCA.Deceleration	:= MotionParameters.Deceleration;
	fbHaltCA.Jerk			:= MotionParameters.Jerk;
	
	fbHaltCA( Axis := AxisReference );
	
END_IF

internalCurrentMoveType		:= MOVETYPE_NONE;
internalCurrentDestPosition	:= 1E300;

memset( ADR( internalCurrentDestObjective), 0, SIZEOF( internalCurrentDestObjective ));
internalCurrentDestStation	REF= 0;

IF ( newCallTime - lastCallHalt ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverHalt,0);
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(MotionParameters.Deceleration);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallHalt		:= newCallTIme;

Halt	:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsSyncedToAxis" Id="{f2757d0f-8cc6-01d8-3ce1-c233354ecef8}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY IsSyncedToAxis : BOOL]]></Declaration>
      <Get Name="Get" Id="{1582f1e6-442b-0b9d-21b6-52b967b5912b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

IsSyncedToAxis		:= fbGearInPosAxisCA[0].InSync OR fbGearInPosAxisCA[1].InSync;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsSyncedToMover" Id="{b02e7e76-e41b-42cd-ad2a-fd14e80d7543}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY IsSyncedToMover : BOOL]]></Declaration>
      <Get Name="Get" Id="{b38e44ed-4371-4ccd-ba7f-e98ea73ca608}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

IsSyncedToMover		:= fbGearInPosMoverCA[0].InSync OR fbGearInPosMoverCA[1].InSync;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsTrackReady" Id="{cd5c6866-73e3-00ad-2292-5fe936355763}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY IsTrackReady : BOOL]]></Declaration>
      <Get Name="Get" Id="{1b14d83a-1ec1-0d2f-1616-ce7f9ce5cce5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsTrackReady := internalTrackIsReady;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="LogUserEvent" Id="{2ade5417-e15a-4da8-a731-8eb7341e5999}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD LogUserEvent : iMover
VAR_INPUT
	String1	: STRING;	// First content section of user-event message
	String2 : STRING;	// Second content section of user-event message
	String3 : STRING;	// Third content section of user-event message
END_VAR
VAR
END_VAR
VAR_INST
	MsgCreate: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[


MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.UserEvent, 0 );
MsgCreate.ipArguments.Clear().AddString(String1).AddString(String2).AddString(String3);
MsgCreate.Send(0);

LogUserEvent	:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MasterMover" Id="{809c0b0b-ecf0-4af1-b9a6-f6c1668f1e51}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MasterMover : Reference To Mover]]></Declaration>
      <Get Name="Get" Id="{cf9c37de-0f5d-4ab8-bb6c-0c7a9a276e2e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

IF THIS^.internalCurrentMoveType = MOVETYPE_SYNC_MOVER THEN
	MasterMover		REF= internalMasterMover;
ELSE
	MasterMover		REF= 0;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveToPosition" Id="{c28d081f-5f21-4357-8651-768a8cf4ef0e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC MoveToPosition : iMover
VAR_INPUT
	DestinationPosition		: LREAL;	// position on track for a shuttle to move towards
END_VAR
VAR
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT( Ready ) THEN	// if the mover is not ready & able to accept a moveabs command...
	
	internalState	:= MV_ERROR;
	ErrorID			:= 19201;

ELSIF (NOT THIS^.ValidateTrack()) THEN
	;	// validate track posts error
	
ELSE	// otherwise let 'er rip
	
	newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	internalReissue := FALSE;	// reissue no longer necessary
	
	IF fbMoveAbsCA[0].Busy = FALSE THEN
		
		fbMoveAbsCA[0].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[0].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[0].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[0].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[0].Direction	:= MotionParameters.Direction;
		fbMoveAbsCA[0].Gap			:= MotionParameters.Gap;
		fbMoveAbsCA[0].Options.DynamicsReferenceSystem	:= CurrentTrack^.OTCID;
		fbMoveAbsCA[0].Options.PositionReferenceSystem	:= CurrentTrack^.OTCID;
		fbMoveAbsCA[0].Options.GapControlMode			:= MotionParameters.GapMode;
		
		fbMoveAbsCA[0].Position		:= DestinationPosition;
		
		fbMoveAbsCA[0].BufferMode	:= mcAborting;
		fbMoveAbsCA[0].Execute		:= TRUE;
		 
		fbMoveAbsCA[0].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[1].Execute		:= FALSE;		// if necessary, interrupt this one
		
		fbMoveAbsCA[0]( Axis := AxisReference );
		
	ELSIF fbMoveAbsCA[1].Busy = FALSE THEN
		
		fbMoveAbsCA[1].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[1].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[1].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[1].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[1].Direction	:= MotionParameters.Direction;
		fbMoveAbsCA[1].Gap			:= MotionParameters.Gap;
		fbMoveAbsCA[1].Options.DynamicsReferenceSystem := CurrentTrack^.OTCID;
		fbMoveAbsCA[1].Options.PositionReferenceSystem := CurrentTrack^.OTCID;
		fbMoveAbsCA[1].Options.GapControlMode			:= MotionParameters.GapMode;

		
		fbMoveAbsCA[1].Position		:= DestinationPosition;
		
		fbMoveAbsCA[1].BufferMode	:= mcAborting;
		fbMoveAbsCA[1].Execute		:= TRUE;
		
		fbMoveAbsCA[1].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[0].Execute		:= FALSE;		// if necessary, interrupt this one
		
		fbMoveAbsCA[1]( Axis := AxisReference );
		 
	ELSE
		MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverMoveToPositionOverload,0 );
		MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(DestinationPosition);
		MsgCreate.Send(0);
	END_IF
	
END_IF

internalCurrentMoveType		:= MOVETYPE_POSITION;
internalCurrentDestPosition := DestinationPosition;

memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
internalCurrentDestStation	REF= 0;

IF ( newCallTime - lastCallMovePos ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverMoveToPosition,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(DestinationPosition);
	MsgCreate.Send(0);
END_IF;

THIS^.SourceInstancePath	:= 'Direct access';

lastCallMovePos		:= newCallTime;

MoveToPosition		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToStation" Id="{73370b80-491c-4017-a420-f08c462d830e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD MoveToStation : iMover
VAR_INPUT
	DestinationStation	: REFERENCE TO Station;	
END_VAR
VAR
	newCallTime			: LREAL;
END_VAR
VAR_INST
	MsgCreate			: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT( Ready ) AND NOT(__ISVALIDREF( DestinationStation )) THEN	// if the mover is not ready & able to accept a moveabs command...
	
	internalState	:= MV_ERROR;
	ErrorID			:= 19201;

ELSIF (NOT THIS^.ValidateTrack()) THEN
	;	// validate track posts error

ELSE	// otherwise let 'er rip
	
	newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	internalReissue := FALSE;	// reissue no longer necessary
	
	IF fbMoveAbsCA[0].Busy = FALSE THEN
		
		fbMoveAbsCA[0].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[0].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[0].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[0].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[0].Direction	:= MotionParameters.Direction;
		fbMoveAbsCA[0].Gap			:= MotionParameters.Gap;
		fbMoveAbsCA[0].Options.DynamicsReferenceSystem := CurrentTrack^.OTCID;
		fbMoveAbsCA[0].Options.PositionReferenceSystem := CurrentTrack^.OTCID;
		fbMoveAbsCA[0].Options.GapControlMode			:= MotionParameters.GapMode;
		
		fbMoveAbsCA[0].Position		:= DestinationStation.internalPosition;
		
		fbMoveAbsCA[0].BufferMode	:= mcAborting;
		fbMoveAbsCA[0].Execute		:= TRUE;
		 
		fbMoveAbsCA[0].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[1].Execute		:= FALSE;		// if necessary, interrupt this one
		
		fbMoveAbsCA[0]( Axis := AxisReference );
		
	ELSIF fbMoveAbsCA[1].Busy = FALSE THEN
		
		fbMoveAbsCA[1].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[1].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[1].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[1].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[1].Direction	:= MotionParameters.Direction;
		fbMoveAbsCA[1].Gap			:= MotionParameters.Gap;
		fbMoveAbsCA[1].Options.DynamicsReferenceSystem := CurrentTrack^.OTCID;
		fbMoveAbsCA[1].Options.PositionReferenceSystem := CurrentTrack^.OTCID;
		fbMoveAbsCA[1].Options.GapControlMode			:= MotionParameters.GapMode;
		
		fbMoveAbsCA[1].Position		:= DestinationStation.internalPosition;
		
		fbMoveAbsCA[1].BufferMode	:= mcAborting;
		fbMoveAbsCA[1].Execute		:= TRUE;
		
		fbMoveAbsCA[1].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[0].Execute		:= FALSE;		// if necessary, interrupt this one

		fbMoveAbsCA[1]( Axis := AxisReference );	

	ELSE
		MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverMoveToStationOverload,0 );
		MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddString(DestinationStation.InstancePath);
		MsgCreate.Send(0);
		
	END_IF
	
	// Set the current destination object to the instance path of the objective, or 0 if unassigned
	internalCurrentDestPosition		:= DestinationStation.Position;
	internalCurrentDestObjective	:= SEL( __ISVALIDREF( DestinationStation ), '', DestinationStation.InstancePath );
	internalCurrentDestStation		REF= DestinationStation;
	internalCurrentMoveType			:= MOVETYPE_STATION;
	
	// Register this mover with the station, so the station knows this mover is incoming
	DestinationStation.RegisterMover( THIS^ );
	
END_IF

IF ( newCallTime - lastCallMoveSta ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverMoveToStation,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddString(DestinationStation.InstancePath);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallMoveSta		:= newCallTime;

MoveToStation		:= THIS^;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveVelocity" Id="{b843a8f8-3644-434c-aaf5-7e88053f31b1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD MoveVelocity : iMover
VAR_INPUT
	DesiredVelocity : LREAL;		//The velocity to be commanded [mm/s]
END_VAR
VAR
	negativeCommand	: BOOL;
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR
VAR CONSTANT
	RelDistance: LREAL := 1e10;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT ( ready ) THEN
	
	internalState	:= MV_ERROR;
	ErrorID			:= 19201;

ELSIF (NOT THIS^.ValidateTrack()) THEN
	;	// validate track posts error

ELSE
	
	newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	internalReissue := FALSE;	// reissue no longer necessary
	
	negativeCommand					:= SEL( DesiredVelocity < 0, FALSE, TRUE );
	MotionParameters.Velocity		:= ABS( DesiredVelocity );
	
	IF fbMoveRelCA[0].Busy = FALSE THEN
		
		fbMoveRelCA[0].Jerk			:= MotionParameters.Jerk;
		
		fbMoveRelCA[0].Acceleration	:= MotionParameters.Acceleration;
		fbMoveRelCA[0].Deceleration	:= MotionParameters.Deceleration;
		fbMoveRelCA[0].Velocity		:= MotionParameters.Velocity;
		fbMoveRelCA[0].Options.DynamicsReferenceSystem	:= CurrentTrack^.OTCID;
		fbMoveRelCA[0].Options.PositionReferenceSystem	:= CurrentTrack^.OTCID;
		fbMoveRelCA[0].Options.GapControlMode			:= MotionParameters.GapMode;
		
		fbMoveRelCA[0].Distance		:= SEL( negativeCommand, RelDistance, -RelDistance );
		fbMoveRelCA[0].Gap			:= MotionParameters.Gap;
		      
		fbMoveRelCA[0].BufferMode	:= mcAborting;
		      
		fbMoveRelCA[0].Execute		:= TRUE;		// execute this block, and...
		fbMoveRelCA[1].Execute		:= FALSE;		// if necessary, interrupt this one
		
		fbMoveRelCA[0]( Axis := AxisReference );
		
	ELSIF fbMoveRelCA[1].Busy = FALSE THEN
		
		fbMoveRelCA[1].Jerk			:= MotionParameters.Jerk;
		
		fbMoveRelCA[1].Acceleration	:= MotionParameters.Acceleration;
		fbMoveRelCA[1].Deceleration	:= MotionParameters.Deceleration;
		fbMoveRelCA[1].Velocity		:= MotionParameters.Velocity;
		fbMoveRelCA[1].Options.DynamicsReferenceSystem := CurrentTrack^.OTCID;
		fbMoveRelCA[1].Options.PositionReferenceSystem := CurrentTrack^.OTCID;
		fbMoveRelCA[1].Options.GapControlMode			:= MotionParameters.GapMode;
		fbMoveRelCA[1].Gap			:= MotionParameters.Gap;
		fbMoveRelCA[1].Distance		:= SEL( negativeCommand, RelDistance, -RelDistance );
		      
		fbMoveRelCA[1].BufferMode	:= mcAborting;
		      
		fbMoveRelCA[1].Execute		:= TRUE;		// execute this block, and...
		fbMoveRelCA[0].Execute		:= FALSE;		// if necessary, interrupt this one

		fbMoveRelCA[1]( Axis := AxisReference );
	ELSE
		MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverMoveVelocityOverload,0 );
		MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(DesiredVelocity);
		MsgCreate.Send(0);
	END_IF

END_IF

fbMoveRelCA[0] ( Axis := AxisReference );
fbMoveRelCA[1] ( Axis := AxisReference );


internalCurrentMoveType		:= MOVETYPE_VELOCITY;
internalCurrentDestPosition := 1E300;

memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
internalCurrentDestStation	REF= 0;

IF ( newCallTime - lastCallMoveVel ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverMoveVelocity,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(DesiredVelocity);
	MsgCreate.Send(0);
END_IF;

THIS^.SourceInstancePath	:= 'Direct access';

lastCallMoveVel		:= newCallTime;

MoveVelocity		:= THIS^;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="NextMover" Id="{852f964d-8625-0223-189c-c4fa1a4b313d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY NextMover : Reference To Mover]]></Declaration>
      <Get Name="Get" Id="{af159a86-85bb-082d-3056-88b1545f1281}">
        <Declaration><![CDATA[VAR
	i						: UINT;
	currentDifference		: LREAL;
	minimumDifference		: LREAL;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

minimumDifference		:= 1E300;
FOR i := 0 TO GVL.NUM_MOVERS - 1 DO	
	IF Mediator.MoverArray[i] <> 0 AND_THEN Mediator.MoverArray[i] <> THIS THEN		// pointer validity
		currentDifference			:= Mediator.MoverArray[i]^.AxisReference.NcToPlc.SetPos - THIS^.AxisReference.NcToPlc.SetPos;
						
		// remain within the same lap
		IF currentDifference < 0 THEN
			currentDifference 		:= currentDifference + GVL.TRACK_LENGTH;
		END_IF
	
		IF currentDifference < minimumDifference THEN
			NextMover				:= Mediator.MoverArray[i]^;
			minimumDifference		:= currentDifference;
		END_IF
	END_IF	
END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Payload" Id="{5caf95a6-ad6c-448d-8947-8c8c07ab0a26}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Payload : USINT]]></Declaration>
      <Get Name="Get" Id="{8a73f5fd-2b02-4094-9725-10c35f9f9334}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

Payload	:= internalPayload;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6f8bbb61-047b-455a-a948-12da14d2f890}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

internalPayload	:= Payload;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="PreviousMover" Id="{831a5835-1520-04bd-1df4-b0219fd1d25b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PreviousMover : REFERENCE TO Mover]]></Declaration>
      <Get Name="Get" Id="{a5a30b40-f29c-03c3-3ba4-ac79951c1881}">
        <Declaration><![CDATA[VAR
	
	i					: UINT;
	currentDifference	: LREAL;
	minimumDifference	: LREAL;

END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

minimumDifference		:= 1E300;
FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
	IF Mediator.MoverArray[i] <> 0 AND_THEN Mediator.MoverArray[i] <> THIS THEN		// pointer validity
		currentDifference			:= THIS^.AxisReference.NcToPlc.SetPos - Mediator.MoverArray[i]^.AxisReference.NcToPlc.SetAcc;
		
		// remain within the same lap
		IF currentDifference < 0 THEN
			currentDifference		:= currentDifference + GVL.TRACK_LENGTH;
		END_IF
		
		IF currentDifference < minimumDifference THEN
			PreviousMover			:= Mediator.MoverArray[i]^;
			minimumDifference		:= currentDifference;
		END_IF
	END_IF
END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ReissueCommand" Id="{195ecbe2-3d92-4d60-b9b5-7e1a3292ea5b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ReissueCommand : iMover
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// set flag for use in .Cyclic()
internalReissue := TRUE;


ReissueCommand		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAcceleration" Id="{6c3e67ff-faff-4c11-8768-1de83c7995e4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetAcceleration : iMover
VAR_INPUT
	Acceleration	: LREAL;
END_VAR
VAR
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;

MotionParameters.Acceleration		:= LIMIT( 0, Acceleration, 1E300 );	// upper limit is capped by the axis object parameters

THIS^.ReissueCommand();

IF ( newCallTime - lastCallSetAcc ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSetAcceleration,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(Acceleration);
	MsgCreate.Send(0);
END_IF;

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSetAcc		:= newCallTime;

SetAcceleration		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetDeceleration" Id="{05a8542e-78cf-4f19-864b-98da64430703}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetDeceleration : iMover
VAR_INPUT
	Deceleration	: LREAL;
END_VAR
VAR
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;

MotionParameters.Deceleration	:= LIMIT( 0, Deceleration, 1E300 ); // upper limit is capped by the axis parameters

THIS^.ReissueCommand();

IF ( newCallTime - lastCallSetDec ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSetDeceleration,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(Deceleration);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSetDec		:= newCallTime;

SetDeceleration		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetDirection" Id="{e0c3c5b2-5259-4ab4-9ff7-1ecaf9015b31}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetDirection : iMover
VAR_INPUT
	Direction		: Tc3_Mc3Definitions.MC_Direction;
END_VAR
VAR
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;

MotionParameters.Direction		:= Direction;

THIS^.ReissueCommand();

IF ( newCallTime - lastCallSetDir ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSetDirection,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddInt(Direction);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSetDir		:= newCallTime;

SetDirection		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetGap" Id="{b046818d-e6b7-0786-00d1-dec2154637f1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetGap : iMover
VAR_INPUT
	Gap	: LREAL;
END_VAR
VAR
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;

MotionParameters.Gap		:= LIMIT( 0, Gap, 1E300 );	// upper limit is capped by the axis object parameters

THIS^.ReissueCommand();

IF ( newCallTime - lastCallSetGap ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSetGap,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(Gap);
	MsgCreate.Send(0);
END_IF;

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSetGap		:= newCallTime;

SetGap		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetGapMode" Id="{a4e6725e-191a-0c31-2393-58563c314975}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetGapMode : iMover
VAR_INPUT
	Mode	: MC_GAP_CONTROL_MODE;
END_VAR
VAR
	newCallTime		: LREAL;
	ModeString		: STRING;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;

MotionParameters.GapMode		:= Mode;	// update gap mode

THIS^.ReissueCommand();

IF ( newCallTime - lastCallSetGap ) > 1 THEN
	// user-friendly string for mode
	CASE Mode OF
		MC_GAP_CONTROL_MODE.mcGapControlModeGroupDefault:
			ModeString := 'Group Default';
		MC_GAP_CONTROL_MODE.mcGapControlModeStandard:
			ModeString := 'Standard';
		MC_GAP_CONTROL_MODE.mcGapControlModeFast:
			ModeString := 'Fast';
		MC_GAP_CONTROL_MODE.mcGapControlModeNone:
			ModeString := 'None';
	END_CASE;
	
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSetGapMode,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddString(ModeString);
	MsgCreate.Send(0);
END_IF;

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSetGap		:= newCallTime;

SetGapMode		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetJerk" Id="{de57e13f-25de-42a4-aec6-c6dc8b78d964}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetJerk : iMover
VAR_INPUT
	Jerk		: LREAL;
END_VAR
VAR
	newCallTime	: LREAL;
END_VAR
VAR_INST
	MsgCreate	: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;

MotionParameters.Jerk		:= LIMIT( 0, Jerk, 1E300 ); // upper limit is capped by the axis parameters

THIS^.ReissueCommand();

IF ( newCallTime - lastCallSetJerk ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSetJerk,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(Jerk);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSetJerk		:= newCallTIme;

SetJerk		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetVelocity" Id="{530483ab-165f-437b-baf5-2db027b7f044}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetVelocity : iMover
VAR_INPUT
	Velocity		: LREAL;		// Updates Mover's internal velocity parameter. Takes effect immediately. [mm/s]
END_VAR
VAR
	logstr			: STRING(200);		// method variable containing an event log message for the command
	LogEvent		: INT;
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;

MotionParameters.Velocity	:= LIMIT( 0, Velocity, 1E300 ); // upper limit is capped by the axis parameters 

THIS^.ReissueCommand();

IF ( newCallTime - lastCallSetVel ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSetVelocity,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddLReal(Velocity);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSetVel	:= newCallTime;

SetVelocity		:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SyncToAxis" Id="{6776bdec-2c5f-03ab-27c8-402842cfde2e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SyncToAxis : iMover
VAR_INPUT
	
	MasterAxis		: REFERENCE TO AXIS_REF;
	MasterSyncPos	: LREAL;				// Master sync position (nonmodulo), where the input axis will be located when first synchronized
	SlaveSyncPos	: LREAL;				// Mover sync position, where the mover will be located when first synchronized
	SyncStrategy	: MC_SYNC_STRATEGY;		// Direction input
	
END_VAR
VAR
	newCallTime		: LREAL;
END_VAR
VAR_INST
	MsgCreate		: FB_TcMessage;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF NOT( Ready ) THEN
	
	internalState		:= MV_ERROR;
	ErrorID				:= 19201;
	
ELSE
	
	newCallTime			:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	internalReissue := FALSE;	// reissue no longer necessary
	
	internalMasterAxis		REF= MasterAxis;
	
	IF fbGearInPosAxisCA[0].Busy = FALSE THEN
		
		fbGearInPosAxisCA[0].Execute			:= TRUE;
		
		fbGearInPosAxisCA[0].RatioNumerator		:= 1;
		fbGearInPosAxisCA[0].RatioDenumerator	:= 1;
		
		fbGearInPosAxisCA[0].MasterSyncPosition	:= MasterSyncPos;	// This needs to be nonmodulo
		fbGearInPosAxisCA[0].SlaveSyncPosition	:= SlaveSyncPos;
		
		fbGearInPosAxisCA[0].SyncStrategy		:= SyncStrategy;
		
		fbGearInPosAxisCA[0].Options.DynamicsReferenceSystem := CurrentTrack^.OTCID;
		fbGearInPosAxisCA[0].Options.SlaveSyncPositionReferenceSystem := CurrentTrack^.OTCID;
		fbGearInPosAxisCA[0].Options.GapControlMode := MotionParameters.GapMode;

		IF MotionParameters.Direction = mcDirectionPositive THEN
			fbGearInPosAxisCA[0].SyncMode		:= mcSyncModePositive;
		ELSIF MotionParameters.Direction = mcDirectionNegative THEN
			fbGearInPosAxisCA[0].SyncMode		:= mcSyncModeNegative;
		END_IF
		
		fbGearInPosAxisCA[0].Velocity			:= MotionParameters.Velocity;
		fbGearInPosAxisCA[0].Acceleration		:= MotionParameters.Acceleration;
		fbGearInPosAxisCA[0].Deceleration		:= MotionParameters.Deceleration;
		fbGearInPosAxisCA[0].Jerk				:= MotionParameters.Jerk;
		
		fbGearInPosAxisCA[0].BufferMode			:= Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting;
		
		fbGearInPosAxisCA[0]( Master := MasterAxis, Slave := THIS^.AxisReference );		
		
	ELSIF fbGearInPosAxisCA[1].Busy = FALSE THEN
		
		fbGearInPosAxisCA[1].Execute			:= TRUE;
		
		fbGearInPosAxisCA[1].RatioNumerator		:= 1;
		fbGearInPosAxisCA[1].RatioDenumerator	:= 1;
		
		fbGearInPosAxisCA[1].MasterSyncPosition	:= MasterSyncPos;	// This needs to be nonmodulo
		fbGearInPosAxisCA[1].SlaveSyncPosition	:= SlaveSyncPos;
		
		fbGearInPosAxisCA[1].SyncStrategy		:= SyncStrategy;
		
		fbGearInPosAxisCA[1].Options.DynamicsReferenceSystem := CurrentTrack^.OTCID;
		fbGearInPosAxisCA[1].Options.SlaveSyncPositionReferenceSystem := CurrentTrack^.OTCID;
		fbGearInPosAxisCA[1].Options.GapControlMode := MotionParameters.GapMode;
		
		IF MotionParameters.Direction = mcDirectionPositive THEN
			fbGearInPosAxisCA[1].SyncMode		:= mcSyncModePositive;
		ELSIF MotionParameters.Direction = mcDirectionNegative THEN
			fbGearInPosAxisCA[1].SyncMode		:= mcSyncModeNegative;				
		END_IF
		
		fbGearInPosAxisCA[1].Velocity			:= MotionParameters.Velocity;
		fbGearInPosAxisCA[1].Acceleration		:= MotionParameters.Acceleration;
		fbGearInPosAxisCA[1].Deceleration		:= MotionParameters.Deceleration;
		fbGearInPosAxisCA[1].Jerk				:= MotionParameters.Jerk;
		
		fbGearInPosAxisCA[1].BufferMode			:= Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting;
		
		fbGearInPosAxisCA[1]( Master := MasterAxis, Slave := THIS^.AxisReference );

	ELSE
		MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSyncToAxisOverload, 0 );
		MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath);
		MsgCreate.Send(0);
	END_IF
	
END_IF

internalCurrentMoveType			:= MOVETYPE_SYNC_AXIS;
internalCurrentDestPosition		:= 1E300;

memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
internalCurrentDestStation		REF= 0;

IF ( newCallTime - lastCallSync ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSyncToAxis, 0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath		:= 'Direct access';

lastCallSync	:= newCallTime;

SyncToAxis		:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SyncToMover" Id="{c1dddc96-f9c0-4f4e-b1ac-4bb8d23d72f1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SyncToMover : iMover
VAR_INPUT
	MasterMover			: REFERENCE TO Mover;	// Synchronization master mover, whose position to follow. Further motion commands break the pairing
	Gap					: LREAL;				// Gap distance to lead mover. Positive values indicate following, negative values indicate leading
END_VAR
VAR
	CWDistToSync		: LREAL;
	CWDistToMaster		: LREAL;
	syncPos				: LREAL;
	newCallTime			: LREAL;
END_VAR
VAR_INST
	MsgCreate			: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT( Ready ) THEN

	internalState	:= MV_ERROR;
	ErrorID			:= 19201;
	
ELSE	// let 'er rip
	
	newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
	internalReissue := FALSE;	// reissue no longer necessary

	internalMasterMover		REF= MasterMover;
	internalGap				:= Gap;
	
	
	syncPos			:= internalMasterMover.AxisReference.NcToPlc.ActPos - internalGap;
	CWDistToSync	:= MODABS( syncPos - THIS^.AxisReference.NcToPlc.ActPos, GVL.TRACK_LENGTH );
	CWDistToMaster	:= MODABS( internalMasterMover.AxisReference.NcToPlc.ActPos - THIS^.AxisReference.NcToPlc.ActPos, GVL.TRACK_LENGTH );
		
	IF fbGearInPosMoverCA[0].Busy = FALSE THEN
		
		fbGearInPosMoverCA[0].Execute				:= TRUE;
			
		fbGearInPosMoverCA[0].RatioNumerator			:= 1;
		fbGearInPosMoverCA[0].RatioDenumerator		:= 1;
		
		fbGearInPosMoverCA[0].MasterSyncPosition		:= internalMasterMover.AxisReference.NcToPlc.ActPos;
		fbGearInPosMoverCA[0].SlaveSyncPosition		:= MODABS( internalMasterMover.AxisReference.NcToPlc.ActPos - internalGap, GVL.TRACK_LENGTH);
		
		fbGearInPosMoverCA[0].SyncStrategy			:= mcSyncStrategyEarly;		
		fbGearInPosMoverCA[0].SyncMode				:= SEL( CWDistToSync < CWDistToMaster, mcSyncModeNegative, mcSyncModePositive );
		
		fbGearInPosMoverCA[0].Options.DynamicsReferenceSystem				:= CurrentTrack^.OTCID;
		fbGearInPosMoverCA[0].Options.SlaveSyncPositionReferenceSystem		:= CurrentTrack^.OTCID;
		fbGearInPosMoverCA[0].Options.GapControlMode						:= MotionParameters.GapMode;
				
		//fbGearInPosMoverCA[0].Options.MinimalSlavePosition	:= -1E300;
		
		fbGearInPosMoverCA[0].Velocity				:= MotionParameters.Velocity;
		fbGearInPosMoverCA[0].Acceleration			:= MotionParameters.Acceleration;
		fbGearInPosMoverCA[0].Deceleration			:= MotionParameters.Deceleration;
		fbGearInPosMoverCA[0].Jerk					:= MotionParameters.Jerk;
		
		fbGearInPosMoverCA[0].BufferMode				:= Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting;
		
		fbGearInPosMoverCA[0]( Master := internalMasterMover.AxisReference, Slave := THIS^.AxisReference );
		
	ELSIF fbGearInPosMoverCA[1].Busy = FALSE THEN
		
		fbGearInPosMoverCA[1].Execute				:= TRUE;
		
		fbGearInPosMoverCA[1].RatioNumerator			:= 1;
		fbGearInPosMoverCA[1].RatioDenumerator		:= 1;
		
		fbGearInPosMoverCA[1].MasterSyncPosition		:= internalMasterMover.AxisReference.NcToPlc.ActPos;
		fbGearInPosMoverCA[1].SlaveSyncPosition		:= MODABS( internalMasterMover.AxisReference.NcToPlc.ActPos - internalGap, GVL.TRACK_LENGTH);
		
		fbGearInPosMoverCA[1].SyncStrategy			:= mcSyncStrategyEarly;
		fbGearInPosMoverCA[1].SyncMode				:= SEL( CWDistToSync < CWDistToMaster, mcSyncModeNegative, mcSyncModePositive );
		
		fbGearInPosMoverCA[1].Options.DynamicsReferenceSystem				:= CurrentTrack^.OTCID;
		fbGearInPosMoverCA[1].Options.SlaveSyncPositionReferenceSystem		:= CurrentTrack^.OTCID;
		fbGearInPosMoverCA[1].Options.GapControlMode						:= MotionParameters.GapMode;
		
		//fbGearInPosMoverCA[1].Options.MinimalSlavePosition	:= -1E300;
		
		fbGearInPosMoverCA[1].Velocity				:= MotionParameters.Velocity;
		fbGearInPosMoverCA[1].Acceleration			:= MotionParameters.Acceleration;
		fbGearInPosMoverCA[1].Deceleration			:= MotionParameters.Deceleration;
		fbGearInPosMoverCA[1].Jerk					:= MotionParameters.Jerk;
		
		fbGearInPosMoverCA[1].BufferMode				:= Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting;
		
		
		fbGearInPosMoverCA[1]( Master := internalMasterMover.AxisReference, Slave := THIS^.AxisReference );
		
	ELSE
		MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSyncToMoverOverload,0 );
		MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddString(MasterMover.InstancePath).AddLReal(Gap);
		MsgCreate.Send(0);
		
	END_IF

END_IF;

internalCurrentMoveType			:= MOVETYPE_SYNC_MOVER;
internalCurrentDestPosition		:= 1E300;

memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
internalCurrentDestStation	REF= 0;

IF ( newCallTime - lastCallSync ) > 1 THEN
	MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.MoverSyncToMover,0 );
	MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath).AddString(MasterMover.InstancePath).AddLReal(Gap);
	MsgCreate.Send(0);
END_IF

THIS^.SourceInstancePath	:= 'Direct access';

lastCallSync		:= newCallTime;


SyncToMover		:= THIS^;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnregisterFromAll" Id="{f143e1ea-77ff-0f0f-21c3-e86b5d1cb377}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD UnregisterFromAll : BOOL
VAR_INPUT
	i		: ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 0 TO GVL.NUM_MOVERLISTS-1 DO
	Mediator.MoverListArray[i]^.UnregisterMover( THIS^ );
END_FOR

FOR i := 0 TO GVL.NUM_POSITIONTRIGGERS-1 DO
	Mediator.PositionTriggerArray[i]^.UnregisterMover( THIS^ );
END_FOR

FOR i := 0 TO GVL.NUM_STATIONS-1 DO
	Mediator.StationArray[i]^.UnregisterMover( THIS^ );
END_FOR

FOR i := 0 TO GVL.NUM_ZONES-1 DO
	Mediator.ZoneArray[i]^.UnregisterMover( THIS^ );
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValidateTrack" Id="{230f15af-f744-0e9b-0384-784f5f4f41dd}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ValidateTrack : BOOL
VAR_INPUT
END_VAR
VAR
	newCallTime: LREAL;
END_VAR
VAR_INST
	MsgCreate			: FB_TcMessage;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// confirms that a valid track is selected and return true
// otherwise throws error and returns false, to be handled by higher-level code
IF internalTrackIsReady THEN
	ValidateTrack := TRUE;
ELSE
	ValidateTrack := FALSE;
		newCallTime		:= ULINT_TO_LREAL(F_GetSystemTime())/1E7;
		
	IF ( newCallTime - lastCallValidateTrack ) > 1 THEN
		MsgCreate.CreateEx( TC_EVENTS.XtsBaseEventClass.ValidateTrackError,0 );
		MsgCreate.ipArguments.Clear().AddString(THIS^.InstancePath).AddString(THIS^.SourceInstancePath);
		MsgCreate.Send(0);
	END_IF	
END_IF

lastCallValidateTrack		:= newCallTime;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Mover">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.ActivateTrack">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="44" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="17" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="69" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrentDestinationPosition.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrentDestinationTrack.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrentMoveType.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrentObjective.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrentTrack.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Cyclic">
      <LineId Id="3" Count="9" />
      <LineId Id="18" Count="28" />
      <LineId Id="525" Count="0" />
      <LineId Id="47" Count="6" />
      <LineId Id="509" Count="11" />
      <LineId Id="144" Count="42" />
      <LineId Id="526" Count="1" />
      <LineId Id="529" Count="1" />
      <LineId Id="532" Count="1" />
      <LineId Id="531" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="237" Count="37" />
      <LineId Id="279" Count="0" />
      <LineId Id="465" Count="1" />
      <LineId Id="483" Count="1" />
      <LineId Id="487" Count="14" />
      <LineId Id="485" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="280" Count="13" />
      <LineId Id="298" Count="7" />
      <LineId Id="310" Count="15" />
      <LineId Id="468" Count="2" />
      <LineId Id="467" Count="0" />
      <LineId Id="326" Count="110" />
      <LineId Id="442" Count="2" />
      <LineId Id="446" Count="12" />
      <LineId Id="476" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="459" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CyclicTrack">
      <LineId Id="5" Count="0" />
      <LineId Id="104" Count="2" />
      <LineId Id="184" Count="7" />
      <LineId Id="107" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="48" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="192" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="56" Count="3" />
      <LineId Id="62" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="153" Count="2" />
      <LineId Id="158" Count="2" />
      <LineId Id="152" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="95" Count="2" />
      <LineId Id="177" Count="0" />
      <LineId Id="100" Count="2" />
      <LineId Id="99" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Disable">
      <LineId Id="3" Count="13" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Enable">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.GroupStop">
      <LineId Id="3" Count="30" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Halt">
      <LineId Id="3" Count="41" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.IsSyncedToAxis.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.IsSyncedToMover.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.IsTrackReady.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.LogUserEvent">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.MasterMover.Get">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.MoveToPosition">
      <LineId Id="3" Count="4" />
      <LineId Id="106" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="9" Count="2" />
      <LineId Id="92" Count="0" />
      <LineId Id="12" Count="7" />
      <LineId Id="109" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="20" Count="17" />
      <LineId Id="110" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="38" Count="10" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="49" Count="19" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.MoveToStation">
      <LineId Id="97" Count="3" />
      <LineId Id="196" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="102" Count="2" />
      <LineId Id="180" Count="0" />
      <LineId Id="105" Count="7" />
      <LineId Id="199" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="210" Count="0" />
      <LineId Id="115" Count="17" />
      <LineId Id="200" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="135" Count="9" />
      <LineId Id="182" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="145" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.MoveVelocity">
      <LineId Id="3" Count="3" />
      <LineId Id="104" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="86" Count="0" />
      <LineId Id="11" Count="10" />
      <LineId Id="107" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="22" Count="17" />
      <LineId Id="109" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="41" Count="7" />
      <LineId Id="87" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="50" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.NextMover.Get">
      <LineId Id="18" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="3" />
      <LineId Id="37" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Payload.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Payload.Set">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.PreviousMover.Get">
      <LineId Id="10" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="22" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="Mover.ReissueCommand">
      <LineId Id="25" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetAcceleration">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetDeceleration">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetDirection">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetGap">
      <LineId Id="14" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetGapMode">
      <LineId Id="14" Count="6" />
      <LineId Id="49" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="56" Count="5" />
      <LineId Id="52" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="21" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetJerk">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetVelocity">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SyncToAxis">
      <LineId Id="3" Count="9" />
      <LineId Id="130" Count="0" />
      <LineId Id="13" Count="13" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="151" Count="0" />
      <LineId Id="27" Count="26" />
      <LineId Id="111" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="54" Count="14" />
      <LineId Id="131" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="70" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SyncToMover">
      <LineId Id="3" Count="7" />
      <LineId Id="105" Count="0" />
      <LineId Id="11" Count="20" />
      <LineId Id="124" Count="2" />
      <LineId Id="143" Count="0" />
      <LineId Id="32" Count="23" />
      <LineId Id="127" Count="2" />
      <LineId Id="144" Count="0" />
      <LineId Id="56" Count="11" />
      <LineId Id="106" Count="1" />
      <LineId Id="109" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="68" Count="23" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.UnregisterFromAll">
      <LineId Id="3" Count="7" />
      <LineId Id="15" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.ValidateTrack">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>