<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Objective" Id="{72371872-54aa-4f25-a82d-ba585015a7c5}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
{attribute 'hide_all_locals'}
FUNCTION_BLOCK ABSTRACT Objective
VAR_INPUT
END_VAR
VAR

    internalTrackedMoverCount 	: USINT;
   
    internalTrackedMovers 		: ARRAY[0..GVL.NUM_MOVERS - 1] OF POINTER TO Mover;

    ErrorMover 					: ErrorMover;
	
    {attribute 'instance-path'}
    {attribute 'noinit'}
    InstancePath 				: STRING; // Unique variable path of the instance	
END_VAR
VAR_OUTPUT
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{4ed72c29-121a-4b01-8ee9-80f4e3e37fcf}" />
    <Folder Name="Properties" Id="{a322a947-e1f7-42e0-b1f3-cb1cbcbf3e25}" />
    <Property Name="CurrentMover" Id="{99a54d83-41c7-49ce-a206-e4c6b3a981c8}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentMover : Reference to Mover]]></Declaration>
      <Get Name="Get" Id="{8bd4cff1-d1fd-42f7-b813-8805845e8ad0}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// If no real mover can be returned as Current, return an imposter instead to output error messages
IF __ISVALIDREF( CurrentMover ) = FALSE THEN
	ErrorMover.SourceInstancePath	:= THIS^.InstancePath;
	CurrentMover					REF= ErrorMover;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RegisterMover" Id="{8354cf16-6187-4fe4-976a-42e2fe3b8399}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD RegisterMover : BOOL
VAR_INPUT
    NewMover : REFERENCE TO Mover;
END_VAR

VAR
    i              : ULINT;
    duplicateFound : BOOL;
    emptyIDX       : ulint;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	Add a mover to a list of movers tracked by the objective.
	Movers can't be added multiple times, so check for duplicates
	Movers can't overwrite others in the list, so check that the array element is clear
*)

IF __ISVALIDREF(NewMover) THEN // validate reference

    duplicateFound            := FALSE; // default to false, counterexample below
    internalTrackedMoverCount := 0;     // reset to zero, incremented below

    FOR i := 0 TO SIZEOF(internalTrackedMovers) / SIZEOF(internalTrackedMovers[i]) - 1 DO
        IF internalTrackedMovers[i] <> 0 THEN
            IF ADR(NewMover) = internalTrackedMovers[i] THEN
                duplicateFound := TRUE; // this mover already tracked
            END_IF

            internalTrackedMoverCount := internalTrackedMoverCount + 1;
        ELSE
            emptyIDX := i; // confirmed open array element
        END_IF
    END_FOR

    IF duplicateFound = FALSE THEN
        internalTrackedMovers[emptyIDX] := ADR(NewMover); // new mover goes into open array element
        internalTrackedMoverCount       := internalTrackedMoverCount + 1;
    END_IF

ELSE
    ADSLOGSTR(ADSLOG_MSGTYPE_LOG, 'Error: Mover input is invalid', '');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterMoverList" Id="{97f69758-a5f2-4092-9f2f-11848d10cf56}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD RegisterMoverList : BOOL
VAR_INPUT
    NewMoverList : iMoverList;
END_VAR
VAR
    i                : ULINT;
    duplicateFound   : BOOL;
    emptyIDX         : USINT;
    arrTrackedMovers : ARRAY[0..GVL.NUM_MOVERS - 1] OF POINTER TO Mover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	Adds an entire MoverList to the Tracked Movers of the objective.
*)

arrTrackedMovers := NewMoverList.TrackedMovers;

// IF __ISVALIDREF( NewMoverList ) THEN
IF NewMoverList <> 0 THEN
    FOR i := 0 TO SIZEOF(arrTrackedMovers) / SIZEOF(arrTrackedMovers[0]) - 1 DO

        THIS^.RegisterMover(arrTrackedMovers[i]^);

    END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="TrackedMoverCount" Id="{610e1915-c97a-4bca-998c-120d922f3eee}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY TrackedMoverCount : USINT]]></Declaration>
      <Get Name="Get" Id="{7832ece5-c334-41ff-a04f-4af0717e7184}">
        <Declaration><![CDATA[VAR
    i : INT;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackedMoverCount := 0;

FOR i := 0 TO GVL.NUM_MOVERS - 1 DO

    IF internalTrackedMovers[i] <> 0 THEN
        TrackedMoverCount := TrackedMoverCount + 1;
    END_IF

END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TrackedMovers" Id="{f2e27676-d8a8-4b3f-968b-790753e7621e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TrackedMovers : ARRAY[0..GVL.NUM_MOVERS - 1] OF POINTER TO Mover]]></Declaration>
      <Get Name="Get" Id="{2692defb-0744-4a89-a02c-657d915f8a30}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackedMovers := internalTrackedMovers;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="UnregisterAll" Id="{8fb61f33-6bbe-4b93-92b5-f08c59b94375}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD UnregisterAll : BOOL
VAR_INPUT
END_VAR
VAR
    i : USINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Blow out the tracked mover array
memset(ADR(internalTrackedMovers), 0, SIZEOF(internalTrackedMovers));]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnregisterCurrent" Id="{f5252866-1ebe-4ec3-aeab-827236ab79ab}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD UnregisterCurrent : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.UnregisterMover(CurrentMover);]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnregisterMover" Id="{18c8f6fd-1567-45b0-85d6-dc2464792b83}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD UnregisterMover : BOOL
VAR_INPUT
    RemovingMover : REFERENCE TO Mover;
END_VAR
VAR
    i              : dint;
    duplicateFound : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	Remove a mover to a list of movers tracked by the objective.
	Only movers in the list can be removed, otherwise nothing happens
*)

//	IF RemovingMover <> 0 THEN			// validate pointer
IF __ISVALIDREF(RemovingMover) THEN

    internalTrackedMoverCount := 0;

    FOR i := 0 TO SIZEOF(internalTrackedMovers) / SIZEOF(internalTrackedMovers[0]) - 1 DO
        IF internalTrackedMovers[i] <> 0 THEN // validate pointer

            internalTrackedMoverCount := internalTrackedMoverCount + 1;

            IF ADR(RemovingMover) = internalTrackedMovers[i] THEN
                internalTrackedMovers[i]  := 0; // remove the pointer
                internalTrackedMoverCount := internalTrackedMoverCount - 1;
            END_IF

        END_IF
    END_FOR

ELSE
    ADSLOGSTR(ADSLOG_MSGTYPE_LOG, 'Error: Mover input is invalid', '');
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Objective">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.CurrentMover.Get">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.RegisterMover">
      <LineId Id="3" Count="29" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.RegisterMoverList">
      <LineId Id="3" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.TrackedMoverCount.Get">
      <LineId Id="3" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.TrackedMovers.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.UnregisterAll">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.UnregisterCurrent">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Objective.UnregisterMover">
      <LineId Id="3" Count="24" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>