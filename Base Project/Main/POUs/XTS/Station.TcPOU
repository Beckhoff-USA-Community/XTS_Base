<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Station" Id="{5b67f0b3-4286-49f2-9b21-1e637f521584}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Station EXTENDS Objective
VAR

    {attribute 'hide'}
    internalPosition : LREAL;
	internalTrackId : DINT; 

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{b783a2bf-4b7a-4aa5-9ae9-11ae8e9caf95}" />
    <Folder Name="Properties" Id="{a0c9a439-1ed2-41be-8a26-9d0fb905bf29}" />
    <Property Name="CurrentMover" Id="{4e639a8f-b6e4-4381-9171-31b76bf41c77}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY CurrentMover : REFERENCE TO Mover]]></Declaration>
      <Get Name="Get" Id="{590174cc-2a32-4e82-86cf-1c2eff136812}">
        <Declaration><![CDATA[VAR

    i          : ULINT;
    difference : LREAL;

	moverTrackId: INT;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[// default to unassigned
CurrentMover REF= 0;

FOR i := 0 TO SIZEOF(internalTrackedMovers) / SIZEOF(internalTrackedMovers[0]) - 1 DO

    // In order to deal with the rollover, we need to evaluate distance between congruence classes
    // e.g. On a 4m track, if the Station is at 0.34mm and the Mover is at 3999.8mm, then this is considered 'in position'	

    IF internalTrackedMovers[i] <> 0 THEN
		moverTrackId := internalTrackedMovers[i]^.CurrentTrack^.Id;
		IF (moverTrackId = internalTrackId) THEN

			difference := Position - internalTrackedMovers[i]^.TrackInfo.TrackPosition;
			// un-wrap if necessary
			IF (difference < 0) THEN 
				difference := difference + GVL.TRACK_LENGTH;
			END_IF
	
			IF (difference < 1.0) AND NOT internalTrackedMovers[i]^.Busy THEN
				CurrentMover                    REF= internalTrackedMovers[i]^;
				CurrentMover.SourceInstancePath := THIS^.InstancePath;
			END_IF
		END_IF
    END_IF

END_FOR

// If the Station has no CurrentMover, then return an imposter ErrorMover, whose method calls all trigger an error message
IF __ISVALIDREF(CurrentMover) = FALSE THEN
    ErrorMover.SourceInstancePath := THIS^.InstancePath;
    CurrentMover                  REF= ErrorMover;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cyclic" Id="{b1387964-723e-4a2a-a4b6-2d82b2e2e3a7}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Cyclic : BOOL

VAR
    i : USINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO GVL.NUM_MOVERS - 1 DO

    // This mover is no longer destined for any station
    IF internalTrackedMovers[i] <> 0 AND_THEN internalTrackedMovers[i]^.CurrentMoveType <> MOVETYPE_STATION THEN
        internalTrackedMovers[i] := 0;
        // This mover is no longer destined for this specific station. Comparing instance path seems to be the best way to do this comparison?
    ELSIF internalTrackedMovers[i] <> 0 AND_THEN internalTrackedMovers[i]^.CurrentObjective <> InstancePath THEN
        internalTrackedMovers[i] := 0;
    END_IF

END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverInPosition" Id="{7b7104e7-1816-4b78-b1aa-ded30e5ff809}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY MoverInPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{11118b5e-d8b3-4427-a8f3-470e1381cae5}">
        <Declaration><![CDATA[VAR

    i          : ULINT;
    difference : LREAL;
	moverTrackId: INT;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[// default to false
MoverInPosition := FALSE;

FOR i := 0 TO SIZEOF(internalTrackedMovers) / SIZEOF(internalTrackedMovers[0]) - 1 DO

    // In order to deal with the rollover, we need to evaluate distance between congruence classes
    // e.g. On a 4m track, if the Station is at 0.34 mm and the Mover is at 3999.8mm, then this is considered 'in position' 

    // todo: make in-position tolerance adjustable. add condition that mover is stopped?
    IF internalTrackedMovers[i] <> 0 THEN
		moverTrackId := internalTrackedMovers[i]^.CurrentTrack^.Id;
		IF (moverTrackId = internalTrackId) THEN
			difference := Position - internalTrackedMovers[i]^.TrackInfo.TrackPosition;
			// un-wrap if necessary
			IF (difference < 0) THEN 
				difference := difference + GVL.TRACK_LENGTH;
			END_IF

			IF (difference < 1.0) AND NOT internalTrackedMovers[i]^.Busy THEN
				MoverInPosition := TRUE;
			END_IF
		END_IF;
    END_IF;

END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Position" Id="{a036a85b-a6ff-4e53-924d-8183c40c2111}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Position : LREAL]]></Declaration>
      <Get Name="Get" Id="{9b1fb402-d994-4b37-826c-4ff94e3f9cbc}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Position := internalPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6983000b-95aa-45e5-9d08-48de77decd80}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[internalPosition := Position;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TrackId" Id="{14a41bad-1d09-07ae-078b-0a0128d8288a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TrackId : DINT]]></Declaration>
      <Get Name="Get" Id="{77f9f1dd-eadb-000e-2c9f-0345f3cc552b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackId := internalTrackId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{74ab2d01-c326-0260-17cc-59b298fe9ee9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[internalTrackId := TrackId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="Station">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Station.CurrentMover.Get">
      <LineId Id="3" Count="8" />
      <LineId Id="46" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="39" Count="6" />
      <LineId Id="16" Count="3" />
      <LineId Id="33" Count="0" />
      <LineId Id="20" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Station.Cyclic">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Station.MoverInPosition.Get">
      <LineId Id="3" Count="9" />
      <LineId Id="33" Count="0" />
      <LineId Id="27" Count="4" />
      <LineId Id="13" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Station.Position.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Station.Position.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Station.TrackId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Station.TrackId.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>