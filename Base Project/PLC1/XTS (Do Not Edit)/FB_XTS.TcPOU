<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_XTS" Id="{87c35dfd-521b-066c-1ce4-3f633fe319d2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_XTS
VAR_GENERIC CONSTANT
	NUM_MOVERS : USINT := 6;
END_VAR
VAR_INPUT

	// ========= System Control / FSM Variables =========
	
	Enable			: BOOL;					// energize all movers
	State    		: XTSStateMachine_enum; // enumeration for the Main state machine
	System			: Mediator;				// System-level control object

	// ========= Linked NC Variables & References =========
	Mover    			: ARRAY[1..NUM_MOVERS] OF ApplicationMover; 	// instantiation of Mover objects. Matches the number of movers on the system
	
	// ========= Objectives & Parameters =========
	ParameterSet		: MotionParameters_typ;
	
	MoverList			: ARRAY[0..Param.NUM_MOVERLISTS-1] OF MoverList;
	PositionTrigger		: ARRAY[0..Param.NUM_POSITIONTRIGGERS-1] OF PositionTrigger;
	Station				: ARRAY[0..Param.NUM_STATIONS-1] OF Station;
	Track				: ARRAY[0..Param.NUM_TRACKS] OF Track;
	Zone				: ARRAY[0..Param.NUM_ZONES-1] OF Zone;
	
	InitialParameterSet		: MotionParameters_typ;
	
END_VAR
VAR_OUTPUT
	MoverPositions	: ARRAY [1..NUM_MOVERS] OF REAL;
	MoverErrors		: ARRAY [1..NUM_MOVERS] OF BOOL;
	MoverErrorIDs	: ARRAY [1..NUM_MOVERS] OF UDINT;
	NumMovers		: USINT;
END_VAR
VAR

    // ========= Helper, State, & Index Variables =========
    i                	: UINT; 	// index variable; gets reused in various FOR loops

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicLogic" Id="{2caa6927-46a3-0758-3d83-d9b9773829a1}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	XTS_DISABLED: // ------------------------------------------
	
		// XTS is idle. Motive power is disabled.	
		IF Enable THEN
			Registering();			// Add all objectives & movers to the system-level Mediator object
			State						:= XTS_INITIALIZING;
		END_IF

	XTS_INITIALIZING: // --------------------------------------
	
		//Initializing();			// Set basic application parameters for the objects
		System.CompleteMoverList.ApplyAllParameterSet( InitialParameterSet );

		System.CompleteMoverList.EnableAll();
		
		IF System.CompleteMoverList.IsAllMoversReady
		 AND system.AllMotorModulesReady AND system.GroupEnabled THEN
			System.ResetStatistics();
			State	:= XTS_ACTIVATE_TRACKS;
		END_IF
		
		IF NOT Enable THEN
			Enable	:= FALSE;
			System.CompleteMoverList.DisableAll();
			State			:= XTS_DISABLING;
		END_IF
		
	XTS_ACTIVATE_TRACKS:	// -------------------------------------------
		System.CompleteMoverList.ActivateAllTrack( Track[1] );
		IF System.CompleteMoverList.IsAllTrackReady
		 AND system.AllMotorModulesReady AND system.GroupEnabled THEN
			System.ResetStatistics();
			State	:= XTS_ENABLED;
		END_IF
		
		IF NOT Enable THEN
			Enable	:= FALSE;
			System.CompleteMoverList.DisableAll();
			State			:= XTS_DISABLING;
		END_IF
	
	XTS_ENABLED:	// -------------------------------------------

        IF System.GroupError OR NOT Enable THEN
			System.CompleteMoverList.HaltAll();
            State           := XTS_STOPPING;
        END_IF
		
	XTS_STOPPING:
		IF System.CompleteMoverList.IsAllMoversHalted THEN
			System.CompleteMoverList.DisableAll();
			State			:= XTS_DISABLING;
		END_IF
		
	XTS_DISABLING: // -------------------------------------------
	
		IF System.CompleteMoverList.IsAllMoversDisabled THEN
			State			:= XTS_DISABLED;
		END_IF
		
	XTS_ERROR: // ---------------------------------------------
	XTS_DEBUG: // ---------------------------------------------	
	

END_CASE

// call system cyclically
System.Cyclic(NUM_MOVERS := NUM_MOVERS);

// update global data
FOR i := 1 TO NUM_MOVERS DO
	MoverPositions[i] := LREAL_TO_REAL(Mover[i].TrackInfo.TrackPosition);
	MoverErrors[i] := Mover[i].Error;
	MoverErrorIDs[i] := Mover[i].ErrorID;
END_FOR
NumMovers := NUM_MOVERS;]]></ST>
      </Implementation>
    </Method>
    <Action Name="Registering" Id="{41624cf4-8fb9-0501-1651-f19186cb236b}">
      <Implementation>
        <ST><![CDATA[// Add all Movers to the Mediator
FOR i := 1 TO NUM_MOVERS DO
	System.AddMover( Mover[i] );
END_FOR

// Add all Mover Lists to the Mediator
FOR i := 0 TO Param.NUM_MOVERLISTS - 1 DO
	System.AddMoverList( MoverList[i] );
END_FOR

// Add all PositionTriggers to the Mediator
FOR i := 0 TO Param.NUM_POSITIONTRIGGERS - 1 DO
	System.AddPositionTrigger( PositionTrigger[i] );
	PositionTrigger[i].SetTrack(Track[1]);
END_FOR

// Add all Stations to the Mediator
FOR i := 0 TO Param.NUM_STATIONS - 1 DO
	System.AddStation( Station[i] );
	Station[i].SetTrack(Track[1]);
END_FOR

// Add all Tracks to the Mediator
// note track zero is a special case, so the loop is one larger than the rest of the initalization loops
FOR i := 0 TO Param.NUM_TRACKS DO
	Track[i].Id := UINT_TO_INT(i);
	System.AddTrack( Track[i] );
END_FOR

// Add all Zones to the Mediator
FOR i := 0 TO Param.NUM_ZONES - 1 DO
	System.AddZone( Zone[i] );
	Zone[i].SetTrack(Track[1]);
END_FOR]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>