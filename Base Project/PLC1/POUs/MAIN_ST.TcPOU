<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN_ST" Id="{d6058fae-6f22-0e77-2647-3c036015a24f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN_ST
VAR_IN_OUT
	XTS				: FB_XTS;
	MainCommands	: MachineCmd_typ;
END_VAR
VAR	

	// Machine
	State			: MachineState_enum;

	Init			: BOOL;
	// ========= Example Application Variables =========

    nextStation 			: USINT := 4;
                    	
    lowVelocity    			: LREAL := 200;  	// mm/s
    mediumVelocity 			: LREAL := 800;  	// mm/s
    highVelocity   			: LREAL := 1200; 	// mm/s
	
	StationTimer 			: ARRAY[0..XTS_BaseLib.Param.NUM_STATIONS] OF TON; // timer blocks, for station dwells
	InitialParameterSet		: MotionParameters_typ;
	RecoveryComplete		: BOOL;
	
	mcDirectionPositive		: Tc2_MC2.MC_Direction;
	Trig0MoverIndex			: UDINT;
	Trig0MoverPosLag		: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Init THEN Initializing(); END_IF

CASE State OF 

	MS_OFF:
		IF MainCommands.Enable THEN
			XTS.Commands.Enable		:= TRUE;
			State					:= MS_RESTARTING;
		END_IF

	MS_RESTARTING:
		IF NOT MainCommands.Enable THEN
			XTS.Commands.Enable		:= FALSE;
			State					:= MS_STOPPING;
		ELSIF XTS.State = XTS_ENABLED THEN
			State		:= MS_ENABLED;
		END_IF
	
	MS_ENABLED:
		IF NOT MainCommands.Enable THEN
			XTS.Commands.Enable		:= FALSE;
			State					:= MS_STOPPING;
		ELSIF MainCommands.Start THEN
			State					:= MS_ONESHOT_RECOVER;
		END_IF
		
	MS_ONESHOT_RECOVER:
		// one time commands before starting typical process motions
		RecoverOneshot();
		State := MS_RECOVERING;
		
	MS_RECOVERING:
		// wait for any recovery actions to complete
		Recovering();
		// test for errors, commands or recovery complete
		IF MainCommands.Stop THEN
			MainCommands.Start		:= FALSE;
			XTS.System.CompleteMoverList.HaltAll();
            State         	:= MS_STOPPING;
        ELSIF NOT MainCommands.Enable THEN
            XTS.Commands.Enable		:= FALSE;
			XTS.System.CompleteMoverList.HaltAll();
            State          			:= MS_STOPPING;
		ELSIF RecoveryComplete THEN
			// recovery sequence is complete, move on to run state
			State			:= MS_RUNNING;
        END_IF

	MS_RUNNING:
		// run the station-to-station mover logic
		StationLogic();
		
		// monitor for disable
		IF NOT MainCommands.Enable THEN
			XTS.Commands.Enable		:= FALSE;
			XTS.System.CompleteMoverList.HaltAll();
			State					:= MS_STOPPING;
		ELSIF MainCommands.Stop THEN
			MainCommands.Start		:= FALSE;
			XTS.System.CompleteMoverList.HaltAll();
			State					:= MS_STOPPING;
		END_IF

	MS_STOPPING:
		IF NOT MainCommands.Enable THEN
			XTS.Commands.Enable 	:= FALSE;
		END_IF
		IF XTS.State = XTS_DISABLED THEN
			State					:= MS_OFF;
		ELSIF  MainCommands.Start THEN
			MainCommands.Stop		:= FALSE;
			State					:= MS_ONESHOT_RECOVER;
		END_IF
	
END_CASE

XTS.CyclicLogic();
]]></ST>
    </Implementation>
    <Action Name="Initializing" Id="{1bfed93c-6153-0409-1a23-c60a46e85016}">
      <Implementation>
        <ST><![CDATA[// XTS Object Init
XTS.Station[0].Position 		:= 5;
XTS.Station[1].Position 		:= 750;
XTS.Station[2].Position 		:= 1200;
XTS.Station[3].Position 		:= 1300;
XTS.Station[4].Position 		:= 1400;

XTS.PositionTrigger[0].Position := 1500;
XTS.PositionTrigger[1].Position := 2000;
XTS.PositionTrigger[2].Position := 3500;

XTS.Zone[0].StartPosition		:= 3750;
XTS.Zone[0].EndPosition   		:= 750;

XTS.Zone[1].StartPosition 		:= 750;
XTS.Zone[1].EndPosition   		:= 1750;

XTS.Zone[2].StartPosition 		:= 1750;
XTS.Zone[2].EndPosition   		:= 2750;

XTS.Zone[3].StartPosition		:= 2750;
XTS.Zone[3].EndPosition   		:= 3750;

XTS.InitialParameterSet.Velocity		:= 1000;		// mm/s
XTS.InitialParameterSet.Acceleration	:= 10_000;		// mm/s2
XTS.InitialParameterSet.Deceleration	:= 10_000;		// mm/s2
XTS.InitialParameterSet.Jerk			:= 100_000;		// mm/s3
XTS.InitialParameterSet.Gap				:= 85;			// mm
XTS.InitialParameterSet.Direction		:= mcDirectionPositive;

LowVelocity		:= 300;
MediumVelocity	:= 800;
HighVelocity	:= 1200;

Init	:= TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Recovering" Id="{41908e14-1e32-0343-178b-b7e168161889}">
      <Implementation>
        <ST><![CDATA[// this state is called until all movers have completed their desired recovery tasks

// wait for all movers to reach the standstill state and one mover at station 0
IF (XTS.System.CompleteMoverList.IsAllMoversHalted AND XTS.Station[0].MoverInPosition) THEN
	RecoveryComplete := TRUE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="RecoverOneshot" Id="{0c13b8a3-fd5a-0041-3f13-12c786601dbf}">
      <Implementation>
        <ST><![CDATA[// this action is called one time after the start command is issued
// it is intended to provide a single command to each mover to facilitate recovery
// other commands such as resetting counters and timers should also be carried out here

// send all movers to station 0
XTS.System.CompleteMoverList.SetAllVelocity(mediumVelocity).MoveAllToStation( XTS.Station[0] );
XTS.System.ResetStatistics();

// Reinit nextStation
nextStation := 4;]]></ST>
      </Implementation>
    </Action>
    <Action Name="StationLogic" Id="{9737a796-fa78-0039-0eea-091d761156c0}">
      <Implementation>
        <ST><![CDATA[		(*Mover routing logic should be written here to define the system's operating behavior.
		Station implementations, Position Trigger logic, etc. In general, you can remove the example code
		here down to the short line break that looks like this: // ============= *)
	
        // Station 0 Logic
        IF XTS.Station[0].MoverInPosition THEN
            StationTimer[0](IN := TRUE, PT := T#1000MS);
            IF StationTimer[0].Q THEN
                XTS.Station[0].CurrentMover.MoveToStation(XTS.Station[1]);
            END_IF
        ELSE
            StationTimer[0](IN := FALSE);
        END_IF
		
        // Station 1 Logic		
        IF XTS.Station[1].MoverInPosition THEN
            StationTimer[1](IN := TRUE, PT := T#250MS);
            IF StationTimer[1].Q THEN
                XTS.Station[1].CurrentMover.MoveToStation(XTS.Station[nextStation]);
                nextStation := nextStation - 1;
                IF nextStation = 1 THEN
                    nextStation := 4;
                END_IF
            END_IF
        ELSE
            StationTimer[1](IN := FALSE);
        END_IF
		
		// Group of Stations 2, 3, and 4 Logic
        IF XTS.Station[2].MoverInPosition AND XTS.Station[3].MoverInPosition AND XTS.Station[4].MoverInPosition THEN
            StationTimer[2](IN := TRUE, PT := T#750MS);
            IF StationTimer[2].Q THEN
				StationTimer[2](IN := FALSE);

                XTS.Station[2].CurrentMover.MoveVelocity(500);
                XTS.Station[3].CurrentMover.MoveVelocity(500);
                XTS.Station[4].CurrentMover.MoveVelocity(500);
            END_IF
        END_IF
		
        // Position Trigger 0 Logic
        IF XTS.PositionTrigger[0].MoverPassedPosition THEN
            XTS.PositionTrigger[0].CurrentMover.SetVelocity(lowVelocity);
			
			// To Call ApplicationMover addon Method/Properties/Variables, you must call Mover[] array index directly
			// Get MoverIndex for later use with ApplicationMover addons
			Trig0MoverIndex		:= XTS.PositionTrigger[0].CurrentMover.MoverIndex;
			
			// Call ApplicationMover Method/Properties/Variables using previously latched MoverIndex
			Trig0MoverPosLag	:= XTS.Mover[Trig0MoverIndex].PositionLag;
			
            XTS.PositionTrigger[0].MuteCurrent();
						
        END_IF
		
        // Position Trigger 1 Logic
        IF XTS.PositionTrigger[1].MoverPassedPosition THEN
			XTS.PositionTrigger[1].CurrentMover.SetAcceleration(5E2);
            XTS.PositionTrigger[1].CurrentMover.SetVelocity(highVelocity);
            XTS.PositionTrigger[1].MuteCurrent();
        END_IF

		// Position Trigger 2 Logic
        IF XTS.PositionTrigger[2].MoverPassedPosition THEN
			XTS.PositionTrigger[2].CurrentMover.SetAcceleration(1E4);
            XTS.PositionTrigger[2].CurrentMover.SetVelocity(lowVelocity);
            XTS.PositionTrigger[2].CurrentMover.MoveToStation(XTS.Station[0]);
            XTS.PositionTrigger[2].MuteCurrent();
        END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="P_ST">
      <LineId Id="1" Count="44" />
    </LineIds>
    <LineIds Name="P_ST.Initializing">
      <LineId Id="1" Count="34" />
    </LineIds>
    <LineIds Name="P_ST.Recovering">
      <LineId Id="1" Count="5" />
    </LineIds>
    <LineIds Name="P_ST.RecoverOneshot">
      <LineId Id="1" Count="9" />
    </LineIds>
    <LineIds Name="P_ST.StationLogic">
      <LineId Id="1" Count="68" />
    </LineIds>
  </POU>
</TcPlcObject>